# EssInitSourceAccount.yaml - Initialize IAM ESS Lab Source Account
#
# This CloudFormation template is used for the External Security Services
# lab.  It sets up the "source account" that will send AWS CloudTrail
# logs to the S3 bucket created by the "logging account."  The security
# services used by this lab are:
#
# Amazon Macie
# Amazon GuardDuty
# Amazon Inspector
# AWS CloudTrail
#
# In particular it creates:
#
# (1) VPC and related components
#
# (2) An Amazon Linux EC2 instance with Apache.  The instance uses the
# cfn-init program along with CloudFormation Metadata to start up
# Amazon GuardDuty, Inspector, and Macie.
#
# (3) A nexted CloudFormation stack that brings up the Macie Activity
# Generator.

---
AWSTemplateFormatVersion: '2010-09-09'

Description: Create ESS Workshop Stack

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Required parameters"
        Parameters: 
          - AmazonLinux2AmiId
    ParameterLabels:
      AmazonLinux2AmiId:
        default: 'Enter the Parameter Store key of the WordPress Amazon Linux 2 AMI (do not change):'

Parameters:

# AmazonLinux2AmiId - The AMI for Amazon Linux 2.  Note that this uses the
# reserved AWS space in Systems Manager Parameter Store.

  AmazonLinux2AmiId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

# Mappings
#
# Constants: Use this mapping table for miscellaneous constant values
# that should be centralized.
#
# HostInstanceType - the instance type for the EC2 instance
# NamePrefix - a prefix to apply to the Name tag of taggable resources
# ProjectTag - a value to apply to the Project tag of taggable resource
# SessionManagerSubnet01Cidr - The CIDR block for the first sesssion manager
#   subnet
# SessionManagerSubnet02Cidr - The CIDR block for the second sesssion manager
#   subnet
# SGWebCidr - the CIDR block that can access HTTP/HTTPS on the EC2 instance
# VpcCidr - the CIDR block to use for the VPC
#
# RegionMap: Define a mapping for the AWS Inspector rule packages.
# Note that we only support us-west-2 and us-east-1 since the ESS portion
# of the workshop will # only run in regions where Amazon Macie is supported
# which is currently limited to us-east-1 and us-west-2.

Mappings:
  Constants:
    Values:
      HostInstanceType: 't2.micro'
      NamePrefix: 'esslab'
      ProjectTag: 'esslab'
      PasswordLength: '12'
      VpcCidr: '10.200.0.0/16'
      PublicSubnetCidr: '10.200.11.0/24'
      SessionMgrSubnet01Cidr: '10.200.21.0/24'
      SessionMgrSubnet02Cidr: '10.200.22.0/24'
      SGWebCidr: '0.0.0.0/0'
  RegionMap: 
    us-west-2:
      CVE: 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-9hgA516p'
      CIS: 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-H5hpSawc'
      SBP: 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-JJOtZiqQ'
      RBA: 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-vg5GGHSD'
    us-east-1:
      CVE: 'arn:aws:inspector:us-east-1:316112463485:rulespackage/0-gEjTy7T7'
      CIS: 'arn:aws:inspector:us-east-1:316112463485:rulespackage/0-rExsr2X8'
      SBP: 'arn:aws:inspector:us-east-1:316112463485:rulespackage/0-R01qwB5Q'
      RBA: 'arn:aws:inspector:us-east-1:316112463485:rulespackage/0-gBONHN9h'

Resources:
  VpcName:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [Constants, Values, 'VpcCidr']
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Join 
        - '-'
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - 'vpc'
          - Fn::GetAtt: [ RandomCharString, RandomString ]
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [Constants, Values, 'PublicSubnetCidr']
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: !Join 
        - '-'
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - 'sn'
          - Fn::GetAtt: [ RandomCharString, RandomString ]
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']
      VpcId: !Ref VpcName

  VpcIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join 
        - '-'
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - 'igw'
          - Fn::GetAtt: [ RandomCharString, RandomString ]
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']

  VpcIgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VpcIgw
      VpcId: !Ref VpcName

  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VpcIgwAttachment
    Properties:
      VpcId: !Ref VpcName
      Tags:
      - Key: Name
        Value: !Join 
        - ''
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - 'rtb'
          - Fn::GetAtt: [ RandomCharString, RandomString ]
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']

  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VpcIgw
      RouteTableId: !Ref RouteTable

  PublicSubnetRtb01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet

  SGWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !FindInMap [Constants, Values, 'SGWebCidr']
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !FindInMap [Constants, Values, 'SGWebCidr']
      Tags:
      - Key: Name
        Value: !Join 
        - '-'
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - 'websg'
          - Fn::GetAtt: [ RandomCharString, RandomString ]
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']
      VpcId: !Ref VpcName

# LambdaExecutionRole - The AWS Lambda execution role for custom
# CloudFormation resources.   This function will be used for the
# Lambda functions that are backing custom CloudFormation resources.
# As such, it must include permissions for all the API calls that
# the Lambda function will make.  This typically includes the APIs
# needed to write to Amazon CloudWatch Logs.  In this case, since
# we are using a custom resource to look up AMIs, it needs to also
# support the DescribeImages API.

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
            - 'macie:*'
            Resource: "*"
          - Effect: Allow
            Action:
            - ec2:DescribeVpcEndpointServices
            Resource: '*'

# VpcEndpointServiceAzsFunction
#
# This is the AWS Lambda function that supports a CloudFormation custom
# resource that is used to look up the available Availability Zones for
# a VPC interface endpoint service.  VPC interface endpoints may only be
# offered in some, perhaps not all, AZs within a given region. This function
# can help you to design CloudFormation templates that choose subnets based
# on their ability to provide such endpoint interfaces.
#
# Resource properties (e.g. input "parameters") for the function:
#
# ServiceName - required - string - the name of the service.  This should be
# something like 'com.amazonaws.us-east-1.secretsmanager'
#
# DesiredNumAzs - required - string - the minimum number of Availability Zones
# that must offer the service (usually '2' or '3').  This should be a whole
# number (i.e. a non-negative integer).
#
#
# Return values via GetAtt:
#
# NumAzs - string - the number of Availability Zones that offer the interface
# endpoint.
#
# Azs - string - a comma-separated list of the AZs.
#
# Errors:
#
# If there are any errors, the Lambda function returns a FAILED status which
# normally triggers a rollback in AWS CloudFormation.   You can see the errors
# in the Amazon CloudWatch Logs.
#
# Notes:
#
# (1) Lambda function code inside of CloudFormation templates cannot exceed
# 4096 characters.

  VpcEndpointServiceAzsFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Description: 'Look up the AZs that are available for a VPC endpoint for a service'
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: 'python3.6'
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import uuid
          import json

          def handler(event, context):

            responseData = {}      
            responseData['StackId'] = event['StackId']
            responseData['RequestId'] = event['RequestId']
            responseData['LogicalResourceId'] = event['LogicalResourceId']

            if event['RequestType'] == 'Delete':
              responseData['Status'] = cfnresponse.SUCCESS
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              return

            # Since we are creating or updating the resource, create a new
            # PhysicalResourceId.
            
            responseData['PhysicalResourceId'] = (
              'VpcEndpointServiceAZs' +
              str(uuid.uuid1())
            )

            try:
              desiredNumAzsStr = event['ResourceProperties']['DesiredNumAzs']
              desiredNumAzs = int(desiredNumAzsStr)
            except:
              responseData['Status'] = cfnresponse.FAILED
              responseData['Reason'] = (
                'DesiredNumAzs is required and must be a whole number'
              )
              print(responseData['Reason'])
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return

            if desiredNumAzs < 0:
              responseData['Status'] = cfnresponse.FAILED
              responseData['Reason'] = (
                'DesiredNumAzs is required and must be a whole number'
              )
              print(responseData['Reason'])
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return

            try:
              ec2=boto3.client('ec2')
            except:
              responseData['Status'] = cfnresponse.FAILED
              responseData['Reason'] = 'unable to set up ec2 client'
              print(responseData['Reason'])
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
            
            try:
              serviceName = event['ResourceProperties']['ServiceName']
              response = ec2.describe_vpc_endpoint_services(
                ServiceNames = [ serviceName ]
              )
            except:
              responseData['Status'] = cfnresponse.FAILED
              responseData['Reason'] = 'unable to rerieve endpoint service info'
              print(responseData['Reason'])
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
            
            print(json.dumps(response))
            
            numberOfServices = len(response['ServiceDetails'])
            if numberOfServices != 1:
              responseData['Status'] = cfnresponse.FAILED
              responseData['Reason'] = (
                'number of services should be 1 but is: ' +
                str(numberOfServices)
              )
              print(responseData['Reason'])
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
            
            Azs = response['ServiceDetails'][0]['AvailabilityZones']
            numAzs = len(Azs)
            if numAzs < desiredNumAzs:
              responseData['Status'] = cfnresponse.FAILED
              responseData['Reason'] = (
                'insufficient number of availability zones - found: ' + 
                str(numAzs)
              )
              print(responseData['Reason'])
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
            
            responseData['Status'] = cfnresponse.SUCCESS
            responseData['NumAzs'] = str(numAzs)
            responseData['Azs'] = ','.join(Azs)
            
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            return

# VpcEndpointSeviceAzsLogGroup - CloudWatch Logs log group for
# VpcEndPointServiceAzsFunction

  VpcEndpointServiceAzsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Join [ '', [ '/aws/lambda/', Ref: VpcEndpointServiceAzsFunction ] ]
      RetentionInDays: 1

# SessionManagerAzs:  Look up the AZs that offer AWS Systems Manager interface
# endpoints

  SessionManagerAzs:
    Type: Custom::SessionManagerAzs
    DependsOn: VpcEndpointServiceAzsLogGroup
    Properties:
      ServiceToken: !GetAtt VpcEndpointServiceAzsFunction.Arn
      ServiceName:
        !Join
        - ''
        - - 'com.amazonaws.'
          - !Ref 'AWS::Region'
          - '.ssmmessages'
      DesiredNumAzs: 2

# SessionMgrSubnet01 and 02: Subnets for the Session Manaager Endpoint
 
  SessionMgrSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Split [",", !GetAtt SessionManagerAzs.Azs]]
      CidrBlock: !FindInMap [Constants, Values, 'SessionMgrSubnet01Cidr']
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: !Join 
        - '-'
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - 'sessmgrsn01'
          - Fn::GetAtt: [ RandomCharString, RandomString ]
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']
      VpcId: !Ref VpcName

  SessionMgrSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !Split [",", !GetAtt SessionManagerAzs.Azs]]
      CidrBlock: !FindInMap [Constants, Values, 'SessionMgrSubnet02Cidr']
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: !Join 
        - '-'
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - 'sessmgrsn02'
          - Fn::GetAtt: [ RandomCharString, RandomString ]
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']
      VpcId: !Ref VpcName

# Associate subnets with the routng table.

  SessionMgrSubnet01Rtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: VpcIgwAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SessionMgrSubnet01

  SessionMgrSubnet02Rtb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: VpcIgwAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SessionMgrSubnet02

# Create Session Manager private interface endpoint.

  SessionManagerEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds:
      - !Ref SessionMgrSubnet01
      - !Ref SessionMgrSubnet02
      SecurityGroupIds:
      - !Ref SGWeb
      ServiceName: !Join 
      - ''
      - - com.amazonaws.
        - !Ref 'AWS::Region'
        - .ssmmessages
      VpcId: !Ref VpcName

# RandomStrFunction - Generate a string of random characters
#
# This AWS Lambda function is used to generate a random string
# of letters. We'll use the Python string module to do this.
# You can change the composition of the string by changing the
# methods that are used.

  RandomStrFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Description: 'Generate a random string of characters'
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: 'python3.6'
      Timeout: 30
      Tags: 
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import string
          import random
          def handler(event, context):
            if event['RequestType'] == 'Delete':
              responseData = {}      
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              return
            
            StringLength=int(event['ResourceProperties']['StringLength'])
            
            if StringLength <= 0:
              responseData = {}
              cfnresponse.send(event, context, cfnresponse.FAILED)
            else:
              responseData = {}
              chars=string.ascii_letters # change this to use other kinds of characters
              
              responseData['RandomString'] = ''.join(random.choice(chars) for _ in range(StringLength))
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            
            return

# RandomCharString - generate a random string for the S3 bucket suffixes, passwords
#
# Parameters
#
# ServiceToken - a pointer to the AWS Lambda function
# StringLength - the length of the random string to generate

  RandomCharString:
    Type: Custom::RandomCharString
    Properties:
      ServiceToken: !GetAtt RandomStrFunction.Arn
      StringLength: '12'

  LampInspectorResourceGroup: 
    Type: AWS::Inspector::ResourceGroup
    Properties: 
      ResourceGroupTags : 
      - Key: Name
        Value: !Join 
        - ''
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - '-server'
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']
    
  LampInspectorAssessmentTarget:
    Type: AWS::Inspector::AssessmentTarget
    Properties:
      ResourceGroupArn: !GetAtt LampInspectorResourceGroup.Arn

  LampInspectorAssessmentTemplate:
    Type: AWS::Inspector::AssessmentTemplate
    Properties:
      AssessmentTargetArn: !GetAtt LampInspectorAssessmentTarget.Arn
      DurationInSeconds: 900
      RulesPackageArns: 
        - !FindInMap [RegionMap, !Ref 'AWS::Region', CVE]
      UserAttributesForFindings: 
      - Key: Name
        Value: !Join 
        - '-'
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - 'server'
          - Fn::GetAtt: [ RandomCharString, RandomString ]
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']

  MacieSetup:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters: 
        BlueprintObject: 'DefaultBlueprint.json'
        LambdaPkgObject: 'LambdaFunction.zip'
      Tags:
      - Key: Name
        Value: !Join 
        - ''
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - '-maciecf'
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']
      TemplateURL: 'https://s3.amazonaws.com/amazon-macie-activity-generator-us-east-1-fb58a9df3468/CloudFormationTemplate.yml'
      TimeoutInMinutes: 10

# LinuxInstanceRole - The IAM role that will be attached to the Amazon EC2
# instance.  In addition to the policy above, we also need to have the
# managed policy ARN for Amazon Inspector so that the service linked role
# required by Amazon Inspector can be created.

  LinuxInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AmazonInspectorFullAccess'
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
      Path: '/'
      Policies: 
      - 
        PolicyName: "root"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'inspector:*'
            Resource: "*"
          - Effect: Allow
            Action:
            - 'guardduty:*'
            Resource: '*'
          - Effect: Allow
            Action:
            - 'iam:CreateServiceLinkedRole'
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/guardduty.amazonaws.com/AWSServiceRoleForAmazonGuardDuty'
            Condition:
              StringLike:
                iam:AWSServiceName: guardduty.amazonaws.com
          - Effect: Allow
            Action:
            - 'macie:*'
            Resource: '*'
          - Effect: Allow
            Action:
            - 'iam:CreateServiceLinkedRole'
            Resource: '*'
            Condition:
              StringLike:
                iam:AWSServiceName: macie.amazonaws.com

  LinuxInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: '/'
      Roles: 
        - !Ref LinuxInstanceRole

# LinuxInstance - An Amazon Linux EC2 instance running Apache
#
# This LAMP instance gives us something we can browse as part of
# the source account.
#
# It also does the following:
#
# (1) Creates a GuardDuty dectector if one is not running and enable
# GuardDuty.
#
# (2) Generates GuardDuty sample findings.
#
# (3) Installs the Amazon Inspector agent.
#
# (4) Starts a 15 minute Inspector assessment run.
#
# (5) Associates the bucket created by the Macie Activity Generator with
# Amazon Macie.
#
# Much of the set up work is done through cfn-init and the instance
# Metadata.  Using the Netadata and cfn-init allows us to conserve userdata
# space which is limited to 8K.


  LinuxInstance:
    Type: AWS::EC2::Instance
    DependsOn:
    - VpcIgwAttachment
    - LampInspectorAssessmentTemplate
    - MacieSetup

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

    Metadata: 
      AWS::CloudFormation::Init: 
        config: 
          packages: 
            yum: 
              httpd: []
          files: 
            /home/ec2-user/guardduty-detector.sh:
              mode: 700
              owner: ec2-user
              group: ec2-user
              content: !Sub |
                #!/bin/bash
                #
                # guardduty-detector.sh
                #
                # (1) Create an AWS GuardDuty detector if one is not already present.
                # (2) Enable the AWS GuardDuty detector.

                DETECTOR_ID=`aws guardduty list-detectors --region ${AWS::Region} --output text --query 'DetectorIds[0]'`
                if [ "$DETECTOR_ID" = "None" ]
                then
                  echo No AWS GuardDuty detector found.
                  echo Starting AWS GuardDuty detector...
                  aws guardduty create-detector --region ${AWS::Region}
                else
                  echo AWS GuardDuty detector found.
                fi

                DETECTOR_ID=`aws guardduty list-detectors --region ${AWS::Region} --output text --query 'DetectorIds[0]'`
                echo Making sure AWS GuardDuty detector is enabled...
                aws guardduty update-detector --detector-id $DETECTOR_ID --enable --region ${AWS::Region}

            /home/ec2-user/guardduty-samplefindings.sh:
              mode: 700
              owner: ec2-user
              group: ec2-user
              content: !Sub |
                #!/bin/bash
                #
                # guardduty-samplefindings.sh
                #
                # (1) Make sure there is a detector.  If there is no detector, exit.
                # (2) Enable the AWS GuardDuty detector.
                # (3) Generate the sample findings.

                DETECTOR_ID=`aws guardduty list-detectors --region ${AWS::Region} --output text --query 'DetectorIds[0]'`
                if [ "$DETECTOR_ID" = "None" ]
                then
                  echo No AWS GuardDuty detector found. Run guardduty-install.sh.
                  exit 1
                fi

                echo Making sure AWS GuardDuty detector is enabled...
                aws guardduty update-detector --detector-id $DETECTOR_ID --enable --region ${AWS::Region}
                echo Creating AWS GuardDuty sample findings...
                aws guardduty create-sample-findings --detector-id $DETECTOR_ID --region ${AWS::Region}

            /home/ec2-user/inspector-install.sh:
              mode: 700
              owner: ec2-user
              group: ec2-user
              source:  https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install

            /home/ec2-user/inspector-runassessment.sh:
              mode: 700
              owner: ec2-user
              group: ec2-user
              content: !Sub |
                #!/bin/bash
                echo Launching AWS Inspector run...
                aws \
                  inspector \
                  start-assessment-run \
                  --assessment-template-arn ${LampInspectorAssessmentTemplate.Arn} \
                  --region ${AWS::Region}

            /home/ec2-user/macie-associates3bucket.sh:
              mode: 700
              owner: ec2-user
              group: ec2-user
              content: !Sub |
                #!/bin/bash
                #
                # Associate the S3 bucket from the Macie Activity Generator
                # to Amazon Macie.
                echo Associating S3 bucket with Amazon Macie...
                aws macie \
                  associate-s3-resources \
                  --s3-resources \
                  bucketName=${MacieSetup.Outputs.DefaultS3Bucket},classificationType=\{oneTime=FULL,continuous=FULL\} \
                  --region ${AWS::Region}

          commands: 
            cmd010:
              command: /home/ec2-user/inspector-install.sh
              cwd: /home/ec2-user
            cmd020:
              command: /home/ec2-user/inspector-runassessment.sh
              cwd: /home/ec2-user
            cmd030:
              command: /home/ec2-user/guardduty-detector.sh
              cwd: /home/ec2-user
            cmd040:
              command: /home/ec2-user/guardduty-samplefindings.sh
              cwd: /home/ec2-user
            cmd050:
              command: /home/ec2-user/macie-associates3bucket.sh
              cwd: /home/ec2-user

    Properties:
      AvailabilityZone: !GetAtt PublicSubnet.AvailabilityZone
      IamInstanceProfile: !Ref LinuxInstanceProfile
      ImageId: !Ref AmazonLinux2AmiId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !FindInMap [Constants, Values, 'HostInstanceType']
      Monitoring: 'true'
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet:
        - !Ref SGWeb
        SubnetId: !Ref PublicSubnet
      Tags:
      - Key: Name
        Value: !Join 
        - '-'
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - 'server'
          - Fn::GetAtt: [ RandomCharString, RandomString ]
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          HOMEDIR=/home/ec2-user

          yum install -y deltarpm
          yum update -y
          yum install -y aws-cfn-bootstrap

          # Update the AWS Systems Manager Agent
          EC2_INSTANCE_ID=`wget -q -O - http://169.254.169.254/latest/meta-data/instance-id`
          aws ssm create-association \
          --targets Key=instanceids,Values=$EC2_INSTANCE_ID \
          --name AWS-UpdateSSMAgent \
          --schedule-expression "cron(0 0 2 ? * SUN *)" \
          --region ${AWS::Region}
          
          /opt/aws/bin/cfn-init \
            --stack ${AWS::StackName} \
            --resource LinuxInstance \
            --region ${AWS::Region}
          
          echo Configuring Apache...
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www && find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;

          echo Starting Apache...
          sudo service httpd start
          sudo chkconfig httpd on

          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource LinuxInstance \
            --region ${AWS::Region}

# LoggingBucket

  LoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: 
      LifecycleConfiguration:
        Rules:
        - ExpirationInDays: 1
          Status: Enabled
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 1
          Status: Enabled
      Tags:
      - Key: Name
        Value: !Join 
        - '-'
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - 'loggingbucket'
          - Fn::GetAtt: [ RandomCharString, RandomString ]
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']

# LoggingBucketPolicy - The policy for the logging bucket
#
# Note that CloudTrail must be able to add objects to the S3
# bucket for logs from both the source and logging accounts.

  LoggingBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: LoggingBucket
      PolicyDocument: 
        Statement: 
        - Sid: AWSCloudTrailAclCheckESSLab
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: s3:GetBucketAcl
          Resource: !GetAtt LoggingBucket.Arn
        - Sid: AWSCloudTrailWriteESSLab
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: s3:PutObject
          Resource:
          - !Sub ${LoggingBucket.Arn}/AWSLogs/${AWS::AccountId}/*
          Condition:
            StringEquals:
              s3:x-amz-acl: bucket-owner-full-control

# LoggingTrail - Create the CloudTrail
#
# NOTE: The DependsOn clause is needed because the bucket pokicy must be in
# place before the trail can be created.

  LoggingTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: LoggingBucketPolicy
    Properties:
      IncludeGlobalServiceEvents: True
      IsLogging: True
      IsMultiRegionTrail: False
      S3BucketName: !Ref LoggingBucket
      Tags:
      - Key: Name
        Value: !Join 
        - '-'
        - - Fn::FindInMap: [Constants, Values, 'NamePrefix']
          - 'trail'
          - Fn::GetAtt: [ RandomCharString, RandomString ]
      - Key: Project
        Value: !FindInMap [Constants, Values, 'ProjectTag']

# SecAdministratorMaciePolicy - Managed Policy for Amazon Macie for Security Administrator role

  SecAdministratorMaciePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'Policy for Security Administrator role'
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: macie:*
          Resource: '*'

# SecOperatorMaciePolicy - Managed Policy for Amazon Macie Security Operator role
#
# NOTE: This policy *initially* is identitcal to SecAdministratorMaciePolicy.
# You will update this policy in the console as part of the lab exercise.

  SecOperatorMaciePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'Policy for Security Operator role'
      Path: '/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: macie:*
          Resource: '*'

# SecAdministratorRole - Security Administrator Role
#
# This role would be used by Security Administrators.  You will be able
# to test this by doing a "Switch Role" from the console.
#
# NOTE: There is an AWS managed policy that provides full access to Amazon
# Macie.  The reason one is being created here is that it allows you to learn
# how to create and edit your own managed policies.
#
# NOTE: Amazon SNS is included because it provides for a cleaner console
# experience for Amazon Inspector.

  SecAdministratorRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              AWS: 
              - !Ref AWS::AccountId
            Action: 
            - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSCloudTrailFullAccess
      - arn:aws:iam::aws:policy/AmazonGuardDutyFullAccess
      - arn:aws:iam::aws:policy/AmazonInspectorFullAccess
      - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      - !Ref SecAdministratorMaciePolicy
      MaxSessionDuration: 43200

# SecOperatorRole - Security Operator Role
#
# This role would be used by Security Operator.  You will be able
# to test this by doing a "Switch Role" from the console.
#
# NOTE: Amazon SNS is included because it provides for a cleaner console
# experience for Amazon Inspector.
#
# NOTE: This role *initially* is almost identitcal to SecAdministratorMacieRole.
# You will update the definition in the console as part of the lab exercise.

  SecOperatorRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              AWS: 
              - !Ref AWS::AccountId
            Action: 
            - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSCloudTrailFullAccess
      - arn:aws:iam::aws:policy/AmazonGuardDutyFullAccess
      - arn:aws:iam::aws:policy/AmazonInspectorFullAccess
      - arn:aws:iam::aws:policy/AmazonSNSReadOnlyAccess 
      - !Ref SecOperatorMaciePolicy
      MaxSessionDuration: 43200

Outputs:
  SecAdministratorRoleURL:
    Value: !Sub
      https://signin.aws.amazon.com/switchrole?account=${AWS::AccountId}&roleName=${SecAdministratorRole}&displayName=SecAdministrator
    Description:  Switch to Security Administrator role

  SecOperatorRoleURL:
    Value: !Sub
      https://signin.aws.amazon.com/switchrole?account=${AWS::AccountId}&roleName=${SecOperatorRole}&displayName=SecOperator
    Description:  Switch to Security Operator role

  LoggingBucketName:
    Value: !Ref LoggingBucket
    Description: Logging bucket name
