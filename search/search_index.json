{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Identity Round Robin \"Identity Round Robin\" is a collection of identity workshops covering a range of identity and access management topics. Each workshop can be done separately and there is no dependency between the workshops. These topics cover identity in general, not just the AWS IAM service. To that end you will find coverage for platform identity, application identity and infrastructure identity on AWS. Some of the services covered include AWS IAM, AWS CloudTrail, Amazon CloudWatch Events, Amazon S3, AWS Lambda, Amazon Macie, Amazon Inspector AWS Security Hub and Amazon GuardDuty. Each round (workshop) takes 2 hours long with 30 minutes devoted to a presentation and 1.5 hours of hands on work. Level : 300 Duration : Each workshop takes 2 hours and can be done separately: Serverless Identity (2 hours) Access Delegation (2 hours) Permissions boundaries (2 hours) CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, IAM User (with admin permissions) Published rounds Serverless Identity Access Delegation Permissions boundaries","title":"Overview"},{"location":"#identity-round-robin","text":"\"Identity Round Robin\" is a collection of identity workshops covering a range of identity and access management topics. Each workshop can be done separately and there is no dependency between the workshops. These topics cover identity in general, not just the AWS IAM service. To that end you will find coverage for platform identity, application identity and infrastructure identity on AWS. Some of the services covered include AWS IAM, AWS CloudTrail, Amazon CloudWatch Events, Amazon S3, AWS Lambda, Amazon Macie, Amazon Inspector AWS Security Hub and Amazon GuardDuty. Each round (workshop) takes 2 hours long with 30 minutes devoted to a presentation and 1.5 hours of hands on work. Level : 300 Duration : Each workshop takes 2 hours and can be done separately: Serverless Identity (2 hours) Access Delegation (2 hours) Permissions boundaries (2 hours) CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, IAM User (with admin permissions)","title":"Identity Round Robin"},{"location":"#published-rounds","text":"Serverless Identity Access Delegation Permissions boundaries","title":"Published rounds"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. You can also contact us directly at aws-security-workshops@amazon.com Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. You can also contact us directly at aws-security-workshops@amazon.com","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"delegation/","text":"Access Delegation Round Welcome to the world of Access Delegation! In this round, you are going to work through a scenario that could arise in an organization that uses Amazon Web Services for production workloads. You will play the role of an AWS \"superuser\" administrator. You have heard that Amazon GuardDuty, Inspector, and Macie are services that can help you monitor the data, host, and network traffic within your AWS environment and detect anomalous behaviors. In this round of the workshop, you will learn how to use Amazon IAM to delegate access to these services to AWS Security Administrators and AWS Security Operators. For the purposes of this round, AWS Security Administrators require full access to AWS security services while AWS Security Operators only require \"read only\" access to the services. You will use AWS IAM roles to do this and thereby promote the Principle of Least Privilege - giving users the minimum level of privilege they need to do their tasks. AWS Service/Feature Coverage : AWS Identity and Access Management (IAM) Console role-switching Amazon GuardDuty Amazon Inspector Amazon Macie Agenda This round is broken down into Build and Verify Phases. BUILD (45 min): At a high level, in the Build Phase you will do the following: Build the environment using AWS CloudFormation in the us-west-2 (Oregon) region. Perform further customization on the environments to restrict the capabilities of the Security Operator Role. Test your customizations. Pass your credentials to another team to verify the configuration of your environment. VERIFY (30 min): The Verify Phase involves testing the work that another team did in building the environmentensure the requirements were met. You will do the following: Obtain the login credentials from another team that has performed the steps in the Build Phase. Test the environment to determine if the Security Operator role has been properly configured. Document any variances. This workshop can be done as a team exercise or individually. The instructions are written with the assumption that you are working as part of a team but you could just as easily do the steps below individually. If done as part of an AWS sponsored event then you'll be split into teams of around 4-6 people. Each team will do the Build Phase and then hand off their accounts to another team. Then another team will do the Verify Phase. NOTE FOR TEAMS : If you are doing this exercise as a team and sharing an AWS account , each team member should take turns \"driving.\" Some services such as GuardDuty and Macie apply to the whole account so only one team member should control that AWS service. Assumptions and Prerequisites You will need an AWS account for this lab and administrative credentials. These may be provided by an event sponsor. You should be familiar with AWS core services such as AWS CloudFormation and Amazon S3. You should also be comfortable using the AWS console. The instructions are written with the understanding that the account is new or clean. We strongly recommend that you do not do these labs in work or \"production\" accounts. Architecture Overview The environment in this round consists of an AWS account in which Amazon GuardDuty, Amazon Inspector, Amazon Macie and Amazon CloudTrail will run. The CloudTrail logs will be sent to an Amazon S3 bucket. The template also creates two AWS IAM roles. The first role is for a Security Administrator which has full access to the External Security Services. The second role is for Security Operators. The Security Operator role initially is very similar to the Security Administrator role but you will modify the permissions of the Security Operator role to provide \"read only\" access to the External Security Services. The use of Security Administrator/Operator roles is very common in organizations that want to delegate the use of security services to different security teams. Here is a picture of what you will build. Preparation You will need an AWS account and the associated administrative login credentials. These may be provided by an event sponsor. Click here to proceed to the Build Phase","title":"Scenario"},{"location":"delegation/#access-delegation-round","text":"Welcome to the world of Access Delegation! In this round, you are going to work through a scenario that could arise in an organization that uses Amazon Web Services for production workloads. You will play the role of an AWS \"superuser\" administrator. You have heard that Amazon GuardDuty, Inspector, and Macie are services that can help you monitor the data, host, and network traffic within your AWS environment and detect anomalous behaviors. In this round of the workshop, you will learn how to use Amazon IAM to delegate access to these services to AWS Security Administrators and AWS Security Operators. For the purposes of this round, AWS Security Administrators require full access to AWS security services while AWS Security Operators only require \"read only\" access to the services. You will use AWS IAM roles to do this and thereby promote the Principle of Least Privilege - giving users the minimum level of privilege they need to do their tasks. AWS Service/Feature Coverage : AWS Identity and Access Management (IAM) Console role-switching Amazon GuardDuty Amazon Inspector Amazon Macie","title":"Access Delegation Round"},{"location":"delegation/#agenda","text":"This round is broken down into Build and Verify Phases. BUILD (45 min): At a high level, in the Build Phase you will do the following: Build the environment using AWS CloudFormation in the us-west-2 (Oregon) region. Perform further customization on the environments to restrict the capabilities of the Security Operator Role. Test your customizations. Pass your credentials to another team to verify the configuration of your environment. VERIFY (30 min): The Verify Phase involves testing the work that another team did in building the environmentensure the requirements were met. You will do the following: Obtain the login credentials from another team that has performed the steps in the Build Phase. Test the environment to determine if the Security Operator role has been properly configured. Document any variances. This workshop can be done as a team exercise or individually. The instructions are written with the assumption that you are working as part of a team but you could just as easily do the steps below individually. If done as part of an AWS sponsored event then you'll be split into teams of around 4-6 people. Each team will do the Build Phase and then hand off their accounts to another team. Then another team will do the Verify Phase. NOTE FOR TEAMS : If you are doing this exercise as a team and sharing an AWS account , each team member should take turns \"driving.\" Some services such as GuardDuty and Macie apply to the whole account so only one team member should control that AWS service.","title":"Agenda"},{"location":"delegation/#assumptions-and-prerequisites","text":"You will need an AWS account for this lab and administrative credentials. These may be provided by an event sponsor. You should be familiar with AWS core services such as AWS CloudFormation and Amazon S3. You should also be comfortable using the AWS console. The instructions are written with the understanding that the account is new or clean. We strongly recommend that you do not do these labs in work or \"production\" accounts.","title":"Assumptions and Prerequisites"},{"location":"delegation/#architecture-overview","text":"The environment in this round consists of an AWS account in which Amazon GuardDuty, Amazon Inspector, Amazon Macie and Amazon CloudTrail will run. The CloudTrail logs will be sent to an Amazon S3 bucket. The template also creates two AWS IAM roles. The first role is for a Security Administrator which has full access to the External Security Services. The second role is for Security Operators. The Security Operator role initially is very similar to the Security Administrator role but you will modify the permissions of the Security Operator role to provide \"read only\" access to the External Security Services. The use of Security Administrator/Operator roles is very common in organizations that want to delegate the use of security services to different security teams. Here is a picture of what you will build.","title":"Architecture Overview"},{"location":"delegation/#preparation","text":"You will need an AWS account and the associated administrative login credentials. These may be provided by an event sponsor.","title":"Preparation"},{"location":"delegation/#click-here-to-proceed-to-the-build-phase","text":"","title":"Click here to proceed to the Build Phase"},{"location":"delegation/build/","text":"Access Delegation Round (Build Phase) IMPORTANT NOTE! Please make sure you have read the scenario section before continuing below. Sign in to AWS Depending on how you're doing this workshop, expand one of the following dropdowns to sign into AWS. AWS-sponsored event In a separate tab in your web browser, go to the URL provided to you and login. After you login click the AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for the Management console . Click on that and you will be taken to the AWS console. Individual or an event not sponsored by AWS In a separate tab in your web browser, go to https://aws.amazon.com/console and log into your account. Enable Macie You will need Macie for this lab so you must make sure Amazon Macie is running. Select Macie from the main console. Macie will open in a new browser tab. Select the us-west (Oregon) region in the Macie console. When the Macie console appears, if a Getting Started button appears, it means that Amazon Macie is disabled. In that case, click Getting Started , confirm that US West (Oregon) is selected as the region, and click Enable Macie . This may take from several seconds to complete. The Macie console will appear after Macie has been enabled. Close the browser tab containing the Macie console. Enable GuardDuty You will also need GuardDuty for this lab so you will now enable GuardDuty. Return to the AWS Console, sigining into the account again if necessary. Select GuardDuty from the main console. If you see a Get Started button, click it. If the region is not set to Oregon, select Oregon for the region. Click Enable GuardDuty . Build out the environment * NOTE : The instructions that follow are based on the classic version of the CloudFormaion console. CloudFormation also offers a redesigned console that offers a different overall look and feel. You are welcome to use the redesigned CLoudFormation console. If you choose to do so, you will notice some minor differences from the instructions below. Open the Deploy to AWS link that follows in a new browser tab to deploy the logging environment in the us-west-2 region: In the new browser tab that you just opened, you will see the Select Template page. Click Next . On the Specify Details/Parameters page, the values have been filled in for you. Click Next . On the Options page, click Next . On the Review page, check the I acknowledge box and click Create . The acknowledgement is requested because of the creation of resources with custom names. The CloudFormation template does this when it creates certain resources with names that make it easier to identify them. CloudFormation will now begin to create the resources. Refresh the browser window to view the progress. This takes about five minutes. Wait until the Status value for the esslab stack shows CREATE_COMPLETE . You can refresh the browser window to update the status. Take a look at the outputs for the esslab CloudFormation stack. They will look similar to the picture below. You may need to drag the horizontal dividing line upwards to see all the output values. The output value assigned to LoggingBucketName is the name of the bucket into which AWS CloudTrail will deliver its logs. Copy the value of LoggingBucketName to a scratch file on your workstation so you have it available later. The value assigned to SecAdministratorRoleURL is a URL that you will use later in the lab to temporarily \"switch to\" (meaning take on the access privileges of) a Securty Administrator role. This role has full administrative privileges for AWS CloudTrail, Amazon GuardDuty, Amazon Inspector, and Amazon Macie. The value assigned to SecOperatorRoleURL is a URL that you will use later in the lab to temporarily \"switch to\" a Securty Operator role. You will later modify the policy associated with this role so it only has \"read only\" privileges for AWS CloudTrail, Amazon GuardDuty, Amazon Inspector, and Amazon Macie. Let's take a look at CloudTrail logging. The most important part of collecting AWS CloudTrail information into an Amazon S3 bucket is setting the correct permissions on the Amazon S3 bucket. Go to the S3 console, check the box next to the bucket with the name assigned to LoggingBucketName which you note in Step 6, click on Permissions , and then Click on Bucket Policy . Note that the policy allows the CloudTrail service to read the ACL of the LoggingBucket and also to create logs with prefixes containing the AWS account ID. you can read more about this policy at this link . Go to the S3 console, check the box next to the bucket with the name LoggingBucketName . Click on Properties . Now click the Overview tab and then click the AWSLogs folder prefix. You should then see the AWS account ID of your account as shown below. This shows that AWS CloudTrail logs for your account have started to make their way to the S3 bucket. It may take up to five minutes for logs to start appearing. Understanding Roles A role is a security principal, an actor, that has a set of policies and a trust relationship. A user, an application, or an AWS service can assume the role in order to subsititute its own access privileges for those associated with the role. The policies define what AWS actions the role can perform. The trust relationshop defines who is allowed to assume the role. The CloudFormation stack you just built created two roles. One role is for a Security Administrator who has full access to CloudTrail, GuardDuty, Inspector, and Macie. The other role is for a Security Operator who, after changes you make later on, will have read-only access to these services. You are going to switch to the Security Administrator role but before doing so, let's look at the privileges associated with that role so you can see what it does. Go to the IAM console, select Roles on the left and search for the string SecAdministrator . You can search either by using your browser's search capability or you can type SecAdministrator into the search box. Click on the role that you retrieve. The policy definition will be similar to the image below. There are six managed policies attached to this role, four of them are provided by AWS for GuardDuty, Inspector, CloudTrail, IAM, and SNS. SNS and IAM are included because it provides for a better console experience. There is a sixth managed policy that was created for Amazon Macie to illustrate how custom managed poicies can be developed. Click on each of the managed policies to see the underlying privileges of each. Note that there are some services, such as Amazon EFS (Elastic File System), that are not granted by any of these policies. You will confirm this lack of access later in this workshop. From the main page of the role, click the Trust relationships tab. You will see a section on the page telling you that the trusted entity (the entity that can assume the role) is the 12-digit AWS account ID as shown below. This means that any principal in the account can assume the role. The internal representation of the trust relatioship is a JSON policy document. Click Show policy document . You will see a policy similar to that shown in the picture below. This policy says that every principal in the account is allowed to use the sts:AssumeRole action to take on the identity of the role. STS stands for Security Token Service . The AssumeRole API associated with the service creates temporary credentials when you call the API that are associated with the security policies of the role including an access key and a secret access key. Your application then uses these security tokens to make calls to other AWS APIs with the policies defined in the role. Switching to the Security Administrator role You are now going to learn about how to switch to a new role in the AWS console. Switching to a new role allows you to temporarily substitute your AWS console permissions for those contained in another role. In this lab, you will be switching to roles that are in your own AWS account. You can also switch to roles in other AWS accounts to gain access to resources in accounts other than your own. This is known as cross-account access . You will not be doing cross-account access in this lab. Go to the CloudFormation console and view the outputs tab of the CloudFormation stack named esslab you just built. Click on the URL next to SecAdministratorRoleURL . You may need to scroll down to see it. A new browser tab window will appear showing information similar to the image below. The box contains the account ID (which is the ID of your AWS account), a role name that was created by CloudFormation, and a Display Name. You can also select a color that will be used to display the role you assume in the console. Click Switch Role . You will now see a new role label named SecAdministrator in the top of your console window as shown below. This means that your effective privileges have been temporarily replaced with those of the SecAdministrator role. Go to the Amazon EFS console. Notice that you get a message telling you that you do not have access to any of the features of the console. This is because none of the underlying policies grant any access to any part of Amazon EFS. Now go to the Amazon Inspector Console. Click Assessment Templates and check the box to the left of the template name that begins with LampInspectorAssessmentTemplate and click Clone . A section of the form will appear. Scroll down towards the bottom and click the Create button. Refresh the screen. You should now see two templates that begin with LampInspectorAssessment . You have just successfully cloned an assessment template which shows that you have administrative access privileges for Inspector. Now go to the GuardDuty console and select the Settings menu item. You may see an error message at the top of the screen about iam:ListPolicyVersions . The reason for this is that you do not have full IAM permissions. Ignore this message. To verify that you do have administrative capabilities for GuardDuty, scroll down to the field named Updated findings and change the value to Send notification every 1 hour and click Save settings at the bottom of the window (you may need to scroll down further). You will see a message at the top of your window (you may need to scroll up) saying that the settings have been saved. This shows you do have full access to GuardDuty . Go to the Macie console, select the US West (Oregon) region, click Settings, and click on the Content Type icon. You will see a list of file types appear. Pick a file type such as application/cap , click the edit widget (it looks like a pencil), change the value of the Enabled flag to No - disabled . This shows that you have administrative access to Macie. Close the Macie window. Go back to the console session that you had for GuardDuty and from there go to the CloudTrail console. Click Trails and then click the trail whose name begins with esslab . Toggle the Logging switch to OFF. You will be asked to confirm. Click Continue . Now toggle Logging back to ON. This shows that you have administrative access to CloudTrail. Now that you have confirmed that you have administrative access to Inspector, Macie, GuardDuty, and CloudTrail, you no longer need your temporary permissions. Click on the SecAdministrator label and select Back to on the bottom right of the menu as shown below. Also note that the console maintains a role history to make it easier for you to switch back to the SecAdministrator role later. After you switch back to your regular role the special role label for SecAdministrator is no longer displayed. Refine the Security Operator role permissions Now that you know how to switch to the Security Administrator role, you are going to make some changes to the permissions for the Security Operator role so that it only has read-only access to Macie, GuardDuty, Inspector, and CloudTrail. Go to the IAM console, select Roles and search for SecOperator . Click on the resulting role that you see. The role will have permissions similar to those shown in the picture below. Notice that there are once again five managed policies, four AWS-managed policies for Inspector, GuardDuty, CloudTrail, and SNS, and a custom managed policy for Macie. The managed policies for Inspector, GuardDuty, and CloudTrail still provide full access to the services. The SNS policy has already been changed to provide read-only access to SNS. The Macie policy (whose name contains SecOperatorMaciePolicy ), despite its name, still provides full access to Macie. Remove the AmazonCloudTrailFullAccess, AmazonGuardDutyFullAccess, and Amazon InspectorFullAccess policies by click on the removal crosses as shown by the arrows. Add read-only access policies for Inspector, CloudTrail, and GuardDuty. Also modify the SecOperatorMacie policy so that it provides read-only access to Macie. If you need some hints, open the dropdown below. Click here to expand Here are some links that offer information that may be helpful to you. Open them in a new browser tab for more information. Controlling access to Amazon CloudTrail Controlling access to Amazon GuardDuty Controlling access to Amazon Inspector Controlling access to Amazon Macie Go to the CloudFormation console and view the outputs tab of the CloudFormation stack named esslab you built earlier. Click on the URL next to SecOperatorRoleURL. A new browser tab window will appear showing information similar to the image below. The box contains the account ID (which is the ID of your AWS account), a role name that was created by CloudFormation, and a Display Name. You can also select a color that will be used to display the role you assume in the console. Click Switch Role . You will now see a new role label named SecAdministrator in the top of your console window as shown below. This means that your effective privileges have been temporarily replaced with those of the SecOperator role. Now go to the Amazon Inspector Console. Click Assessment Templates and check the box to the left of both of the template name that begins with LampInspectorAssessmentTemplate and click Delete . You will be asked to confirm the deletion. Click Yes . After 30 or so seconds you will see an error message telling you that you are not authorized to call the inspector:DeleteAssessmentTemplate action. This is because you have read-only access to Inspector. Now go to the GuardDuty console, click Settings , change the Updated findings field to a different value, and click Save settings . You will see an error message telling you that you are not authorized to perform the UpdateDetector action (the message may appear beneath the first IAM error message). This is because you have read-only access to GuardDuty. Go to the Macie console, select the US West (Oregon) region, click on Settings and click on the Content Type icon. You will see a list of file types appear. Pick a file type such as application/cap , edit it and change the value of the Enabled flag and click Save . You will receive an error message because you have read-only access to Macie. Close the Macie window. Go back to the console session that you had for GuardDuty and from there go to the CloudTrail console. Click Trails and click the trail whose name begins with esslab . Toggle the Logging switch to OFF. Click Continue . You will receive an error message because you have read-only access to CloudTrail. Now switch back to your default role. After you to this the SecOperator role label will no longer appear on your console. If you doing this workshop as part of a team, you will pass your account credentials to another team that will verify the configuration of your roles. Click here to proceed to the Verify Phase.","title":"Build Phase"},{"location":"delegation/build/#access-delegation-round-build-phase","text":"IMPORTANT NOTE! Please make sure you have read the scenario section before continuing below.","title":"Access Delegation Round (Build Phase)"},{"location":"delegation/build/#sign-in-to-aws","text":"Depending on how you're doing this workshop, expand one of the following dropdowns to sign into AWS. AWS-sponsored event In a separate tab in your web browser, go to the URL provided to you and login. After you login click the AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for the Management console . Click on that and you will be taken to the AWS console. Individual or an event not sponsored by AWS In a separate tab in your web browser, go to https://aws.amazon.com/console and log into your account.","title":"Sign in to AWS"},{"location":"delegation/build/#enable-macie","text":"You will need Macie for this lab so you must make sure Amazon Macie is running. Select Macie from the main console. Macie will open in a new browser tab. Select the us-west (Oregon) region in the Macie console. When the Macie console appears, if a Getting Started button appears, it means that Amazon Macie is disabled. In that case, click Getting Started , confirm that US West (Oregon) is selected as the region, and click Enable Macie . This may take from several seconds to complete. The Macie console will appear after Macie has been enabled. Close the browser tab containing the Macie console.","title":"Enable Macie"},{"location":"delegation/build/#enable-guardduty","text":"You will also need GuardDuty for this lab so you will now enable GuardDuty. Return to the AWS Console, sigining into the account again if necessary. Select GuardDuty from the main console. If you see a Get Started button, click it. If the region is not set to Oregon, select Oregon for the region. Click Enable GuardDuty .","title":"Enable GuardDuty"},{"location":"delegation/build/#build-out-the-environment","text":"* NOTE : The instructions that follow are based on the classic version of the CloudFormaion console. CloudFormation also offers a redesigned console that offers a different overall look and feel. You are welcome to use the redesigned CLoudFormation console. If you choose to do so, you will notice some minor differences from the instructions below. Open the Deploy to AWS link that follows in a new browser tab to deploy the logging environment in the us-west-2 region: In the new browser tab that you just opened, you will see the Select Template page. Click Next . On the Specify Details/Parameters page, the values have been filled in for you. Click Next . On the Options page, click Next . On the Review page, check the I acknowledge box and click Create . The acknowledgement is requested because of the creation of resources with custom names. The CloudFormation template does this when it creates certain resources with names that make it easier to identify them. CloudFormation will now begin to create the resources. Refresh the browser window to view the progress. This takes about five minutes. Wait until the Status value for the esslab stack shows CREATE_COMPLETE . You can refresh the browser window to update the status. Take a look at the outputs for the esslab CloudFormation stack. They will look similar to the picture below. You may need to drag the horizontal dividing line upwards to see all the output values. The output value assigned to LoggingBucketName is the name of the bucket into which AWS CloudTrail will deliver its logs. Copy the value of LoggingBucketName to a scratch file on your workstation so you have it available later. The value assigned to SecAdministratorRoleURL is a URL that you will use later in the lab to temporarily \"switch to\" (meaning take on the access privileges of) a Securty Administrator role. This role has full administrative privileges for AWS CloudTrail, Amazon GuardDuty, Amazon Inspector, and Amazon Macie. The value assigned to SecOperatorRoleURL is a URL that you will use later in the lab to temporarily \"switch to\" a Securty Operator role. You will later modify the policy associated with this role so it only has \"read only\" privileges for AWS CloudTrail, Amazon GuardDuty, Amazon Inspector, and Amazon Macie. Let's take a look at CloudTrail logging. The most important part of collecting AWS CloudTrail information into an Amazon S3 bucket is setting the correct permissions on the Amazon S3 bucket. Go to the S3 console, check the box next to the bucket with the name assigned to LoggingBucketName which you note in Step 6, click on Permissions , and then Click on Bucket Policy . Note that the policy allows the CloudTrail service to read the ACL of the LoggingBucket and also to create logs with prefixes containing the AWS account ID. you can read more about this policy at this link . Go to the S3 console, check the box next to the bucket with the name LoggingBucketName . Click on Properties . Now click the Overview tab and then click the AWSLogs folder prefix. You should then see the AWS account ID of your account as shown below. This shows that AWS CloudTrail logs for your account have started to make their way to the S3 bucket. It may take up to five minutes for logs to start appearing.","title":"Build out the environment"},{"location":"delegation/build/#understanding-roles","text":"A role is a security principal, an actor, that has a set of policies and a trust relationship. A user, an application, or an AWS service can assume the role in order to subsititute its own access privileges for those associated with the role. The policies define what AWS actions the role can perform. The trust relationshop defines who is allowed to assume the role. The CloudFormation stack you just built created two roles. One role is for a Security Administrator who has full access to CloudTrail, GuardDuty, Inspector, and Macie. The other role is for a Security Operator who, after changes you make later on, will have read-only access to these services. You are going to switch to the Security Administrator role but before doing so, let's look at the privileges associated with that role so you can see what it does. Go to the IAM console, select Roles on the left and search for the string SecAdministrator . You can search either by using your browser's search capability or you can type SecAdministrator into the search box. Click on the role that you retrieve. The policy definition will be similar to the image below. There are six managed policies attached to this role, four of them are provided by AWS for GuardDuty, Inspector, CloudTrail, IAM, and SNS. SNS and IAM are included because it provides for a better console experience. There is a sixth managed policy that was created for Amazon Macie to illustrate how custom managed poicies can be developed. Click on each of the managed policies to see the underlying privileges of each. Note that there are some services, such as Amazon EFS (Elastic File System), that are not granted by any of these policies. You will confirm this lack of access later in this workshop. From the main page of the role, click the Trust relationships tab. You will see a section on the page telling you that the trusted entity (the entity that can assume the role) is the 12-digit AWS account ID as shown below. This means that any principal in the account can assume the role. The internal representation of the trust relatioship is a JSON policy document. Click Show policy document . You will see a policy similar to that shown in the picture below. This policy says that every principal in the account is allowed to use the sts:AssumeRole action to take on the identity of the role. STS stands for Security Token Service . The AssumeRole API associated with the service creates temporary credentials when you call the API that are associated with the security policies of the role including an access key and a secret access key. Your application then uses these security tokens to make calls to other AWS APIs with the policies defined in the role.","title":"Understanding Roles"},{"location":"delegation/build/#switching-to-the-security-administrator-role","text":"You are now going to learn about how to switch to a new role in the AWS console. Switching to a new role allows you to temporarily substitute your AWS console permissions for those contained in another role. In this lab, you will be switching to roles that are in your own AWS account. You can also switch to roles in other AWS accounts to gain access to resources in accounts other than your own. This is known as cross-account access . You will not be doing cross-account access in this lab. Go to the CloudFormation console and view the outputs tab of the CloudFormation stack named esslab you just built. Click on the URL next to SecAdministratorRoleURL . You may need to scroll down to see it. A new browser tab window will appear showing information similar to the image below. The box contains the account ID (which is the ID of your AWS account), a role name that was created by CloudFormation, and a Display Name. You can also select a color that will be used to display the role you assume in the console. Click Switch Role . You will now see a new role label named SecAdministrator in the top of your console window as shown below. This means that your effective privileges have been temporarily replaced with those of the SecAdministrator role. Go to the Amazon EFS console. Notice that you get a message telling you that you do not have access to any of the features of the console. This is because none of the underlying policies grant any access to any part of Amazon EFS. Now go to the Amazon Inspector Console. Click Assessment Templates and check the box to the left of the template name that begins with LampInspectorAssessmentTemplate and click Clone . A section of the form will appear. Scroll down towards the bottom and click the Create button. Refresh the screen. You should now see two templates that begin with LampInspectorAssessment . You have just successfully cloned an assessment template which shows that you have administrative access privileges for Inspector. Now go to the GuardDuty console and select the Settings menu item. You may see an error message at the top of the screen about iam:ListPolicyVersions . The reason for this is that you do not have full IAM permissions. Ignore this message. To verify that you do have administrative capabilities for GuardDuty, scroll down to the field named Updated findings and change the value to Send notification every 1 hour and click Save settings at the bottom of the window (you may need to scroll down further). You will see a message at the top of your window (you may need to scroll up) saying that the settings have been saved. This shows you do have full access to GuardDuty . Go to the Macie console, select the US West (Oregon) region, click Settings, and click on the Content Type icon. You will see a list of file types appear. Pick a file type such as application/cap , click the edit widget (it looks like a pencil), change the value of the Enabled flag to No - disabled . This shows that you have administrative access to Macie. Close the Macie window. Go back to the console session that you had for GuardDuty and from there go to the CloudTrail console. Click Trails and then click the trail whose name begins with esslab . Toggle the Logging switch to OFF. You will be asked to confirm. Click Continue . Now toggle Logging back to ON. This shows that you have administrative access to CloudTrail. Now that you have confirmed that you have administrative access to Inspector, Macie, GuardDuty, and CloudTrail, you no longer need your temporary permissions. Click on the SecAdministrator label and select Back to on the bottom right of the menu as shown below. Also note that the console maintains a role history to make it easier for you to switch back to the SecAdministrator role later. After you switch back to your regular role the special role label for SecAdministrator is no longer displayed.","title":"Switching to the Security Administrator role"},{"location":"delegation/build/#refine-the-security-operator-role-permissions","text":"Now that you know how to switch to the Security Administrator role, you are going to make some changes to the permissions for the Security Operator role so that it only has read-only access to Macie, GuardDuty, Inspector, and CloudTrail. Go to the IAM console, select Roles and search for SecOperator . Click on the resulting role that you see. The role will have permissions similar to those shown in the picture below. Notice that there are once again five managed policies, four AWS-managed policies for Inspector, GuardDuty, CloudTrail, and SNS, and a custom managed policy for Macie. The managed policies for Inspector, GuardDuty, and CloudTrail still provide full access to the services. The SNS policy has already been changed to provide read-only access to SNS. The Macie policy (whose name contains SecOperatorMaciePolicy ), despite its name, still provides full access to Macie. Remove the AmazonCloudTrailFullAccess, AmazonGuardDutyFullAccess, and Amazon InspectorFullAccess policies by click on the removal crosses as shown by the arrows. Add read-only access policies for Inspector, CloudTrail, and GuardDuty. Also modify the SecOperatorMacie policy so that it provides read-only access to Macie. If you need some hints, open the dropdown below. Click here to expand Here are some links that offer information that may be helpful to you. Open them in a new browser tab for more information. Controlling access to Amazon CloudTrail Controlling access to Amazon GuardDuty Controlling access to Amazon Inspector Controlling access to Amazon Macie Go to the CloudFormation console and view the outputs tab of the CloudFormation stack named esslab you built earlier. Click on the URL next to SecOperatorRoleURL. A new browser tab window will appear showing information similar to the image below. The box contains the account ID (which is the ID of your AWS account), a role name that was created by CloudFormation, and a Display Name. You can also select a color that will be used to display the role you assume in the console. Click Switch Role . You will now see a new role label named SecAdministrator in the top of your console window as shown below. This means that your effective privileges have been temporarily replaced with those of the SecOperator role. Now go to the Amazon Inspector Console. Click Assessment Templates and check the box to the left of both of the template name that begins with LampInspectorAssessmentTemplate and click Delete . You will be asked to confirm the deletion. Click Yes . After 30 or so seconds you will see an error message telling you that you are not authorized to call the inspector:DeleteAssessmentTemplate action. This is because you have read-only access to Inspector. Now go to the GuardDuty console, click Settings , change the Updated findings field to a different value, and click Save settings . You will see an error message telling you that you are not authorized to perform the UpdateDetector action (the message may appear beneath the first IAM error message). This is because you have read-only access to GuardDuty. Go to the Macie console, select the US West (Oregon) region, click on Settings and click on the Content Type icon. You will see a list of file types appear. Pick a file type such as application/cap , edit it and change the value of the Enabled flag and click Save . You will receive an error message because you have read-only access to Macie. Close the Macie window. Go back to the console session that you had for GuardDuty and from there go to the CloudTrail console. Click Trails and click the trail whose name begins with esslab . Toggle the Logging switch to OFF. Click Continue . You will receive an error message because you have read-only access to CloudTrail. Now switch back to your default role. After you to this the SecOperator role label will no longer appear on your console. If you doing this workshop as part of a team, you will pass your account credentials to another team that will verify the configuration of your roles. Click here to proceed to the Verify Phase.","title":"Refine the Security Operator role permissions"},{"location":"delegation/verify/","text":"Access Delegation Round (Verify Phase) IMPORTANT NOTE! Please make sure you have followed the instructions in the instructions in the scenario section and the build phase before continuing below. The Verification Challenge: Test how the environment was built In the previous phase, you tested the environment that you built. Your goal in this section is to evaluate the security of the environments that were built by another team . Depending on how you're doing this workshop, expand one of the following dropdowns to sign in to AWS. AWS-sponsored event In a separate tab in your web browser, go to the URL provided to you and login. After you login click the AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for the Management console . Click on that and you will be taken to the AWS console. Individual or an event not sponsored by AWS In a separate tab in your web browser, go to https://aws.amazon.com/console and log into your account. Verify the Security Operator role Go to the CloudFormation console and view the outputs tab of the CloudFormation stack named esslab . Click on the URL next to SecOperatorRoleURL. A new browser tab window will appear showing information similar to the image below. The box contains the account ID (which is the ID of your AWS account), a role name that was created by CloudFormation, and a Display Name. You can also select a color that will be used to display the role you assume in the console. Click Switch Role . You will now see a new role label named SecAdministrator in the top of your console window as shown below. This means that your effective privileges have been temporarily replaced with those of the SecOperator role. Now go to the Amazon Inspector Console. Click Assessment Templates and check the box to the left of both of the template name that begins with LampInspectorAssessmentTemplate and click Delete . You will be asked to confirm the deletion. Click Yes . After 30 or so seconds you will see an error message telling you that you are not authorized to call the inspector:DeleteAssessmentTemplate action. This is because you have read-only access to Inspector. This is because you have read-only access to Inspector. Now go to the GuardDuty console, click Settings , change the Updated findings field, and click Save settings . You will see an error message telling you that you are not authorized to perform the UpdateDetector action (the message may appear beneath the first IAM error message). This is because you have read-only access to GuardDuty. Go to the Macie console, select the us-west-2 region, click on Settings and click on the Content Type icon. You will see a list of file types appear. Pick a file type such as application/cap , edit it and change the value of the Enabled flag and click Save . You will receive an error message because you have read-only access to Macie. Close the Macie window. Go back to the console session that you had for GuardDuty and from there go to the CloudTrail console. Select the trail whose name begins with esslab . Toggle the Logging switch to OFF. You will be asked to confirm. Click Continue . You will receive an error message because you have read-only access to CloudTrail. Now switch back to your default role. After you to this the SecOperator role label will no longer appear on your console. Discuss your findings Discuss any variances you find and share them with the team that built the environment. Clean Up In order to prevent charges to your account we recommend cleaning up the infrastructure that was created, especially if you are doing other Identity rounds. Expand one of the following dropdowns and follow the instructions: AWS Sponsored Event No cleanup required! The responsibility falls to AWS. Individual or an event not sponsored by AWS Follow the steps below to remove the core componenets. Delete the SecOperator role . Delete the CloudFormation stack . Wait until stack have been deleted. Disable Amazon Macie . Disable Amazon GuardDuty . Delete the logging bucket . Delete the Amazon Inspector templates . Congratulations on completing the External Security Services round!","title":"Verify Phase"},{"location":"delegation/verify/#access-delegation-round-verify-phase","text":"IMPORTANT NOTE! Please make sure you have followed the instructions in the instructions in the scenario section and the build phase before continuing below.","title":"Access Delegation Round (Verify Phase)"},{"location":"delegation/verify/#the-verification-challenge-test-how-the-environment-was-built","text":"In the previous phase, you tested the environment that you built. Your goal in this section is to evaluate the security of the environments that were built by another team . Depending on how you're doing this workshop, expand one of the following dropdowns to sign in to AWS. AWS-sponsored event In a separate tab in your web browser, go to the URL provided to you and login. After you login click the AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for the Management console . Click on that and you will be taken to the AWS console. Individual or an event not sponsored by AWS In a separate tab in your web browser, go to https://aws.amazon.com/console and log into your account.","title":"The Verification Challenge:  Test how the environment was built"},{"location":"delegation/verify/#verify-the-security-operator-role","text":"Go to the CloudFormation console and view the outputs tab of the CloudFormation stack named esslab . Click on the URL next to SecOperatorRoleURL. A new browser tab window will appear showing information similar to the image below. The box contains the account ID (which is the ID of your AWS account), a role name that was created by CloudFormation, and a Display Name. You can also select a color that will be used to display the role you assume in the console. Click Switch Role . You will now see a new role label named SecAdministrator in the top of your console window as shown below. This means that your effective privileges have been temporarily replaced with those of the SecOperator role. Now go to the Amazon Inspector Console. Click Assessment Templates and check the box to the left of both of the template name that begins with LampInspectorAssessmentTemplate and click Delete . You will be asked to confirm the deletion. Click Yes . After 30 or so seconds you will see an error message telling you that you are not authorized to call the inspector:DeleteAssessmentTemplate action. This is because you have read-only access to Inspector. This is because you have read-only access to Inspector. Now go to the GuardDuty console, click Settings , change the Updated findings field, and click Save settings . You will see an error message telling you that you are not authorized to perform the UpdateDetector action (the message may appear beneath the first IAM error message). This is because you have read-only access to GuardDuty. Go to the Macie console, select the us-west-2 region, click on Settings and click on the Content Type icon. You will see a list of file types appear. Pick a file type such as application/cap , edit it and change the value of the Enabled flag and click Save . You will receive an error message because you have read-only access to Macie. Close the Macie window. Go back to the console session that you had for GuardDuty and from there go to the CloudTrail console. Select the trail whose name begins with esslab . Toggle the Logging switch to OFF. You will be asked to confirm. Click Continue . You will receive an error message because you have read-only access to CloudTrail. Now switch back to your default role. After you to this the SecOperator role label will no longer appear on your console.","title":"Verify the Security Operator role"},{"location":"delegation/verify/#discuss-your-findings","text":"Discuss any variances you find and share them with the team that built the environment.","title":"Discuss your findings"},{"location":"delegation/verify/#clean-up","text":"In order to prevent charges to your account we recommend cleaning up the infrastructure that was created, especially if you are doing other Identity rounds. Expand one of the following dropdowns and follow the instructions: AWS Sponsored Event No cleanup required! The responsibility falls to AWS. Individual or an event not sponsored by AWS Follow the steps below to remove the core componenets. Delete the SecOperator role . Delete the CloudFormation stack . Wait until stack have been deleted. Disable Amazon Macie . Disable Amazon GuardDuty . Delete the logging bucket . Delete the Amazon Inspector templates . Congratulations on completing the External Security Services round!","title":"Clean Up"},{"location":"permission-boundaries/","text":"Permission boundaries round Your customer has deployed a three tier web application in production. Different teams work on different aspects of the architecture but they don't always communicate well. Just recently the team responsible for the web front end set up a Lambda function that inadvertently impacted the application team's resources. The VP of Operations was furious. The VP has tasked you with setting up permissions for the web admins so that they can only impact their own resources while still being able to do their job. AWS Service/Feature Coverage : AWS IAM permission boundaries AWS IAM identifiers or resource restrictions AWS IAM users & roles AWS Lambda Agenda The round is broken down into a BUILD phase followed by a VERIFY phase. BUILD (60 min): First each team will carry out the activities involved in the BUILD phase where they will set up access for the web admins and properly lock down the account. Then each team will hand credentials for an IAM user in their account to another team to act in the VERIFY phase. The VERIFY phase lasts about 30 min. VERIFY (30 min): Each team will carry out the VERIFY activities as if they were part of the web admins team. The VERIFY activities will include validating that the requirements were set up correctly in the BUILD phase and also investigate if the web admins are able to take actions that they shouldn't be allowed to. Team or Individual Exercise This workshop can be done as a team exercise or individually. The instructions are written with assumption that you are working as part of a team but you could just as easily do the steps below on your own. If done as part of an AWS sponsored event then you'll be split into teams of around 4-6 people. Each team will do the BUILD phase and then hand off their accounts to another team. Then each team will do the VERIFY phase. Using this workshop as an example, the three elements of a permission boundary are represented below. When your team does the BUILD tasks you will act as the admin. When your team does the VERIFY tasks you will act as the delegated admin. The delegated admins will create roles that can be considered \"bound\" since they will have permission boundaries attached. Requirements Click here for the account architecture Account architecture: There are many teams working in this AWS account, including the web admins and the application admins. The ulimate goal of this workshop is to set up the web admins so they can create a Lambda function to read an S3 bucket while making sure they are not able to impact the resources of other teams. The web admins should only have access to the following resources: IAM policies and roles created by the web admins Lambda functions created by the web admins S3 buckets: The web admins are allowed access to the bucket that starts with \"web-admins-\" and ends in \"-data\" Presentation If you are doing this workshop as part of an AWS event then there will usually be a 30 minute presentation before the hands-on exercise. Here is the presentation deck . Click here to go to the BUILD phase","title":"Scenario"},{"location":"permission-boundaries/#permission-boundaries-round","text":"Your customer has deployed a three tier web application in production. Different teams work on different aspects of the architecture but they don't always communicate well. Just recently the team responsible for the web front end set up a Lambda function that inadvertently impacted the application team's resources. The VP of Operations was furious. The VP has tasked you with setting up permissions for the web admins so that they can only impact their own resources while still being able to do their job. AWS Service/Feature Coverage : AWS IAM permission boundaries AWS IAM identifiers or resource restrictions AWS IAM users & roles AWS Lambda","title":"Permission boundaries round"},{"location":"permission-boundaries/#agenda","text":"The round is broken down into a BUILD phase followed by a VERIFY phase. BUILD (60 min): First each team will carry out the activities involved in the BUILD phase where they will set up access for the web admins and properly lock down the account. Then each team will hand credentials for an IAM user in their account to another team to act in the VERIFY phase. The VERIFY phase lasts about 30 min. VERIFY (30 min): Each team will carry out the VERIFY activities as if they were part of the web admins team. The VERIFY activities will include validating that the requirements were set up correctly in the BUILD phase and also investigate if the web admins are able to take actions that they shouldn't be allowed to. Team or Individual Exercise This workshop can be done as a team exercise or individually. The instructions are written with assumption that you are working as part of a team but you could just as easily do the steps below on your own. If done as part of an AWS sponsored event then you'll be split into teams of around 4-6 people. Each team will do the BUILD phase and then hand off their accounts to another team. Then each team will do the VERIFY phase. Using this workshop as an example, the three elements of a permission boundary are represented below. When your team does the BUILD tasks you will act as the admin. When your team does the VERIFY tasks you will act as the delegated admin. The delegated admins will create roles that can be considered \"bound\" since they will have permission boundaries attached.","title":"Agenda"},{"location":"permission-boundaries/#requirements","text":"Click here for the account architecture Account architecture: There are many teams working in this AWS account, including the web admins and the application admins. The ulimate goal of this workshop is to set up the web admins so they can create a Lambda function to read an S3 bucket while making sure they are not able to impact the resources of other teams. The web admins should only have access to the following resources: IAM policies and roles created by the web admins Lambda functions created by the web admins S3 buckets: The web admins are allowed access to the bucket that starts with \"web-admins-\" and ends in \"-data\"","title":"Requirements"},{"location":"permission-boundaries/#presentation","text":"If you are doing this workshop as part of an AWS event then there will usually be a 30 minute presentation before the hands-on exercise. Here is the presentation deck .","title":"Presentation"},{"location":"permission-boundaries/#click-here-to-go-to-the-build-phase","text":"","title":"Click here to go to the BUILD phase"},{"location":"permission-boundaries/build/","text":"Permissions boundaries round Build Phase Below are a series of tasks to delegate permissions to the web admins. In these tasks you will be creating policies and testing them. It helps to divide the team into people doing the tasks and people testing things out. Setup Instructions To setup your environment please expand one of the following drop-downs (depending on how if you are doing this workshop at an AWS event or individually ) and follow the instructions: AWS Sponsored Event Console Login: if you are attending this workshop at an official AWS event then your team should have the URL and login credentials for your account. This will allow you to login to the account using AWS SSO. Browse to that URL and login. After you login click AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for Management console . Click on that and you will be taken the AWS console. Make sure the region is set to Ohio (us-east-2) CloudFormation: Launch the CloudFormation stack below to setup the environment: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Select Template section. Click Next on the Specify Details section (the stack name will be already filled - you can change it or leave it as is) Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Individual Log in to your account however you would normally CloudFormation: Launch the CloudFormation stack below to setup the environment: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Select Template section. Click Next on the Specify Details section (the stack name will already be filled - you can change it or leave it as is) Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Task 1 Create an IAM user and an IAM policy with permission to create managed policies, IAM roles and Lambda functions Build an IAM policy so that web admins can create customer managed policies, IAM roles and Lambda functions. They should only be able to edit the policies, roles and lambda functions they create. Attention As you use the provided IAM policy hints in each task, keep in mind where you need to add the account ID, correctly use the resource restrictions and change the region specified if needed (although if you are taking this as part of an AWS event, please use the Ohio region or us-east-2.) Missing any of these items can cause issues with your policies Walk Through Browse to the IAM console . On the first screen you see in the IAM console (which should be the Dashboard) find the IAM users sign-in link . Copy that link because you will need the account ID in the URL for the policies and you will need the entire URL when you hand this account to another team for the VERIFY phase. Click Users on the left menu and create a new IAM user named webadmin . Check AWS Management Console access and then either autogenerate a password or set a custom password. Uncheck Require password reset . Attach the AWS managed policies IAMReadOnlyAccess & AWSLambdaReadOnlyAccess to the user. Next click Policies on the left menu. Create a new IAM policy based on the hint below. Attach this policy to the webadmin IAM user you just created. Hint IAM Identifiers : You will want to use either naming or pathing resource restrictions in the IAM policy. The question marks \" ???? \" in the resource element below should be replaced with something that could act as a resource restriction. Examine the existing resources (roles, Lambda functions) to make sure the policy will give access to existing resources owned by the web admins. Replacing the question marks is really the key to this round. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"CreateCustomerManagedPolicies\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreatePolicy\" , \"iam:DeletePolicy\" , \"iam:CreatePolicyVersion\" , \"iam:DeletePolicyVersion\" , \"iam:SetDefaultPolicyVersion\" ], \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:policy/????\" }, { \"Sid\" : \"CreateRoles\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreateRole\" , \"iam:UpdateRole\" , \"iam:DeleteRole\" , \"iam:AttachRolePolicy\" , \"iam:DetachRolePolicy\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:role/????\" ] }, { \"Sid\" : \"LambdaFullAccesswithResourceRestrictions\" , \"Effect\" : \"Allow\" , \"Action\" : \"lambda:*\" , \"Resource\" : \"arn:aws:lambda:us-east-2:ACCOUNT_ID:function:????\" }, { \"Sid\" : \"PassRoletoLambda\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:PassRole\" , \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:role/????\" , \"Condition\" : { \"StringLikeIfExists\" : { \"iam:PassedToService\" : \"lambda.amazonaws.com\" } } }, { \"Sid\" : \"AdditionalPermissionsforLambda\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"kms:ListAliases\" , \"logs:Describe*\" , \"logs:ListTagsLogGroup\" , \"logs:FilterLogEvents\" , \"logs:GetLogEvents\" ], \"Resource\" : \"*\" } ] } As you complete the following tests, keep in mind the resource restriction you set up in the policy above ( ???? ). Use the IAM users sign-in link you gathered earlier to login: Login with the webadmin IAM user (using a different browser) to verify the user can create a policy. The permissions you set on the policy do not matter at this point. Also verify you can create a role (while following the resource restriction.) This role should use Lambda as the trusted entity (we will use this role to test the next task) an attach the policy you just created to it. Finally verify the user can create a lambda function with the role you just created attached. Question Why are we using resource restrictions here? There are two ways of doing resource restrictions: naming and pathing. Which option are we using here? Which option allows you to create policies using both the AWS Console and CLI? Task 2 Create a permissions boundary The webadmin user can create IAM polices, IAM role and Lambda functions. We now need to limit the permissions of the roles the user create. If not then the web admins could simply create new policies with full admin rights, attach these to the roles, pass these roles to Lambda functions and escalate their permissions (either intentionally or inadvertently). We will use permissions boundaries to limits the effective permissions of the roles. The permissions boundary should allow the following effective permissions for any role created by the web admins: i. Create log groups (but can not overwrite any other log groups) ii. Create log streams and put logs iii. List the objects from the S3 bucket name that starts with \"web-admins-\" and ends in \"-data\" Walk Through: Create a new IAM policy that will act as the permissions boundary for the web admins. Hint IAM Identifiers : The question marks ???? in the resource element below should be replaced with something that could act as a resource restriction. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"CreateLogGroup\" , \"Effect\" : \"Allow\" , \"Action\" : \"logs:CreateLogGroup\" , \"Resource\" : \"arn:aws:logs:us-east-2:ACCOUNT_ID:*\" }, { \"Sid\" : \"CreateLogStreamandEvents\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"logs:CreateLogStream\" , \"logs:PutLogEvents\" ], \"Resource\" : \"arn:aws:logs:us-east-2:ACCOUNT_ID:log-group:/aws/lambda/????:*\" }, { \"Sid\" : \"AllowedS3GetObject\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"s3:List*\" ], \"Resource\" : \"arn:aws:s3:::web-admins-ACCOUNT_ID-*\" } ] } Name the policy webadminpermissionboundary Question What do you attach the permission boundary to? How does a permissions boundary differ from a standard IAM policy? How could you test the permissions boundary at this point? Task 3 Update the permission policy for the webadmin to incorporate the permissions boundary condition Walk Through Create a policy that references the permissions boundary we just created. It is recommended that you just create a new policy and use the example below. Note that the policy below contains two additional sections (the last two sections) that we did not address in the earlier tasks. The additions are focused on denying the ability to change or delete the permission policy and the permissions boundary. Hint permissions boundaries : The question marks ???? in the resource elements below should be replaced with something that could act as a resource restriction. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"CreateCustomerManagedPolicies\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreatePolicy\" , \"iam:DeletePolicy\" , \"iam:CreatePolicyVersion\" , \"iam:DeletePolicyVersion\" , \"iam:SetDefaultPolicyVersion\" ], \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:policy/????\" }, { \"Sid\" : \"RoleandPolicyActionswithnoPermissionBoundarySupport\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:UpdateRole\" , \"iam:DeleteRole\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:role/????\" ] }, { \"Sid\" : \"CreateRoles\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreateRole\" , \"iam:AttachRolePolicy\" , \"iam:DetachRolePolicy\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:role/????\" ], \"Condition\" : { \"StringEquals\" : { \"iam:PermissionsBoundary\" : \"arn:aws:iam::ACCOUNT_ID:policy/webadminpermissionboundary\" } } }, { \"Sid\" : \"LambdaFullAccesswithResourceRestrictions\" , \"Effect\" : \"Allow\" , \"Action\" : \"lambda:*\" , \"Resource\" : \"arn:aws:lambda:us-east-2:ACCOUNT_ID:function:????\" }, { \"Sid\" : \"PassRoletoLambda\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:PassRole\" , \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:role/????\" , \"Condition\" : { \"StringLikeIfExists\" : { \"iam:PassedToService\" : \"lambda.amazonaws.com\" } } }, { \"Sid\" : \"AdditionalPermissionsforLambda\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"kms:ListAliases\" , \"logs:Describe*\" , \"logs:ListTagsLogGroup\" , \"logs:FilterLogEvents\" , \"logs:GetLogEvents\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"DenyPermissionBoundaryandPolicyDeleteModify\" , \"Effect\" : \"Deny\" , \"Action\" : [ \"iam:CreatePolicyVersion\" , \"iam:DeletePolicy\" , \"iam:DeletePolicyVersion\" , \"iam:SetDefaultPolicyVersion\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:policy/webadminpermissionboundary\" , \"arn:aws:iam::ACCOUNT_ID:policy/webadminpermissionpolicy\" ] }, { \"Sid\" : \"DenyRolePermissionBoundaryDelete\" , \"Effect\" : \"Deny\" , \"Action\" : \"iam:DeleteRolePermissionsBoundary\" , \"Resource\" : \"*\" } ] } Name the new policy webadminpermissionpolicy and attach it to the webadmin user. Remove the earlier policy you added during the testing. When you are done the webadmin user should have only three policies attached: webadminpermissionpolicy, IAMReadOnlyAccess & AWSLambdaReadOnlyAccess. Again from the browser where you are logged into the console as the webadmin , verify the user can create a policy, create a role (attaching both a permission policy and permissions boundary to the role) and finally create a Lambda function into which you will pass that role. Keep in mind the resource restriction. Question Why do we add the Deny for DeletePolicy actions regarding the webadminpermissionboundary & webadminpermissionpolicy? What would happen if we didn't deny the ability to delete permissions boundaries? Task 4 Gather info needed for the VERIFY phase Walk Through Now that you have setup the IAM user for the web admins, it's time to pass this information on to the next team who will work through the VERIFY tasks. You need to gather some details about your setup and then hand this info to the next team. Here are all of the details you need to pass to another team. If you following the recommended naming conventions than you can use the answers below. If you were given a form to fill out then enter the info into the form. This needs to be given to another team so they can do the VERIFY phase tasks. Your team should collect the VERIFY phase form from another team so you can also work through the VERIFY tasks. IAM users sign-in link: https://Account_ID.signin.aws.amazon.com/console IAM user name: webadmin IAM user password: Resource restriction identifier: permissions boundary name: webadminpermissionboundary Permission policy name: webadminpermissionpolicy Tip Do not hand out this info to the same team that is giving you the info - this way we will end up properly swapping between teams if we have an odd number of teams. Click here to go to the VERIFY phase","title":"Build Phase"},{"location":"permission-boundaries/build/#permissions-boundaries-round-build-phase","text":"Below are a series of tasks to delegate permissions to the web admins. In these tasks you will be creating policies and testing them. It helps to divide the team into people doing the tasks and people testing things out.","title":"Permissions boundaries round Build Phase"},{"location":"permission-boundaries/build/#setup-instructions","text":"To setup your environment please expand one of the following drop-downs (depending on how if you are doing this workshop at an AWS event or individually ) and follow the instructions: AWS Sponsored Event Console Login: if you are attending this workshop at an official AWS event then your team should have the URL and login credentials for your account. This will allow you to login to the account using AWS SSO. Browse to that URL and login. After you login click AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for Management console . Click on that and you will be taken the AWS console. Make sure the region is set to Ohio (us-east-2) CloudFormation: Launch the CloudFormation stack below to setup the environment: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Select Template section. Click Next on the Specify Details section (the stack name will be already filled - you can change it or leave it as is) Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Individual Log in to your account however you would normally CloudFormation: Launch the CloudFormation stack below to setup the environment: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Select Template section. Click Next on the Specify Details section (the stack name will already be filled - you can change it or leave it as is) Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE .","title":"Setup Instructions"},{"location":"permission-boundaries/build/#task-1-create-an-iam-user-and-an-iam-policy-with-permission-to-create-managed-policies-iam-roles-and-lambda-functions","text":"Build an IAM policy so that web admins can create customer managed policies, IAM roles and Lambda functions. They should only be able to edit the policies, roles and lambda functions they create. Attention As you use the provided IAM policy hints in each task, keep in mind where you need to add the account ID, correctly use the resource restrictions and change the region specified if needed (although if you are taking this as part of an AWS event, please use the Ohio region or us-east-2.) Missing any of these items can cause issues with your policies","title":"Task 1 Create an IAM user and an IAM policy with permission to create managed policies, IAM roles and Lambda functions"},{"location":"permission-boundaries/build/#walk-through","text":"Browse to the IAM console . On the first screen you see in the IAM console (which should be the Dashboard) find the IAM users sign-in link . Copy that link because you will need the account ID in the URL for the policies and you will need the entire URL when you hand this account to another team for the VERIFY phase. Click Users on the left menu and create a new IAM user named webadmin . Check AWS Management Console access and then either autogenerate a password or set a custom password. Uncheck Require password reset . Attach the AWS managed policies IAMReadOnlyAccess & AWSLambdaReadOnlyAccess to the user. Next click Policies on the left menu. Create a new IAM policy based on the hint below. Attach this policy to the webadmin IAM user you just created. Hint IAM Identifiers : You will want to use either naming or pathing resource restrictions in the IAM policy. The question marks \" ???? \" in the resource element below should be replaced with something that could act as a resource restriction. Examine the existing resources (roles, Lambda functions) to make sure the policy will give access to existing resources owned by the web admins. Replacing the question marks is really the key to this round. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"CreateCustomerManagedPolicies\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreatePolicy\" , \"iam:DeletePolicy\" , \"iam:CreatePolicyVersion\" , \"iam:DeletePolicyVersion\" , \"iam:SetDefaultPolicyVersion\" ], \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:policy/????\" }, { \"Sid\" : \"CreateRoles\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreateRole\" , \"iam:UpdateRole\" , \"iam:DeleteRole\" , \"iam:AttachRolePolicy\" , \"iam:DetachRolePolicy\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:role/????\" ] }, { \"Sid\" : \"LambdaFullAccesswithResourceRestrictions\" , \"Effect\" : \"Allow\" , \"Action\" : \"lambda:*\" , \"Resource\" : \"arn:aws:lambda:us-east-2:ACCOUNT_ID:function:????\" }, { \"Sid\" : \"PassRoletoLambda\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:PassRole\" , \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:role/????\" , \"Condition\" : { \"StringLikeIfExists\" : { \"iam:PassedToService\" : \"lambda.amazonaws.com\" } } }, { \"Sid\" : \"AdditionalPermissionsforLambda\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"kms:ListAliases\" , \"logs:Describe*\" , \"logs:ListTagsLogGroup\" , \"logs:FilterLogEvents\" , \"logs:GetLogEvents\" ], \"Resource\" : \"*\" } ] } As you complete the following tests, keep in mind the resource restriction you set up in the policy above ( ???? ). Use the IAM users sign-in link you gathered earlier to login: Login with the webadmin IAM user (using a different browser) to verify the user can create a policy. The permissions you set on the policy do not matter at this point. Also verify you can create a role (while following the resource restriction.) This role should use Lambda as the trusted entity (we will use this role to test the next task) an attach the policy you just created to it. Finally verify the user can create a lambda function with the role you just created attached. Question Why are we using resource restrictions here? There are two ways of doing resource restrictions: naming and pathing. Which option are we using here? Which option allows you to create policies using both the AWS Console and CLI?","title":"Walk Through"},{"location":"permission-boundaries/build/#task-2-create-a-permissions-boundary","text":"The webadmin user can create IAM polices, IAM role and Lambda functions. We now need to limit the permissions of the roles the user create. If not then the web admins could simply create new policies with full admin rights, attach these to the roles, pass these roles to Lambda functions and escalate their permissions (either intentionally or inadvertently). We will use permissions boundaries to limits the effective permissions of the roles. The permissions boundary should allow the following effective permissions for any role created by the web admins: i. Create log groups (but can not overwrite any other log groups) ii. Create log streams and put logs iii. List the objects from the S3 bucket name that starts with \"web-admins-\" and ends in \"-data\"","title":"Task 2 Create a permissions boundary"},{"location":"permission-boundaries/build/#walk-through_1","text":"Create a new IAM policy that will act as the permissions boundary for the web admins. Hint IAM Identifiers : The question marks ???? in the resource element below should be replaced with something that could act as a resource restriction. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"CreateLogGroup\" , \"Effect\" : \"Allow\" , \"Action\" : \"logs:CreateLogGroup\" , \"Resource\" : \"arn:aws:logs:us-east-2:ACCOUNT_ID:*\" }, { \"Sid\" : \"CreateLogStreamandEvents\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"logs:CreateLogStream\" , \"logs:PutLogEvents\" ], \"Resource\" : \"arn:aws:logs:us-east-2:ACCOUNT_ID:log-group:/aws/lambda/????:*\" }, { \"Sid\" : \"AllowedS3GetObject\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"s3:List*\" ], \"Resource\" : \"arn:aws:s3:::web-admins-ACCOUNT_ID-*\" } ] } Name the policy webadminpermissionboundary Question What do you attach the permission boundary to? How does a permissions boundary differ from a standard IAM policy? How could you test the permissions boundary at this point?","title":"Walk Through:"},{"location":"permission-boundaries/build/#task-3-update-the-permission-policy-for-the-webadmin-to-incorporate-the-permissions-boundary-condition","text":"","title":"Task 3 Update the permission policy for the webadmin to incorporate the permissions boundary condition"},{"location":"permission-boundaries/build/#walk-through_2","text":"Create a policy that references the permissions boundary we just created. It is recommended that you just create a new policy and use the example below. Note that the policy below contains two additional sections (the last two sections) that we did not address in the earlier tasks. The additions are focused on denying the ability to change or delete the permission policy and the permissions boundary. Hint permissions boundaries : The question marks ???? in the resource elements below should be replaced with something that could act as a resource restriction. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"CreateCustomerManagedPolicies\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreatePolicy\" , \"iam:DeletePolicy\" , \"iam:CreatePolicyVersion\" , \"iam:DeletePolicyVersion\" , \"iam:SetDefaultPolicyVersion\" ], \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:policy/????\" }, { \"Sid\" : \"RoleandPolicyActionswithnoPermissionBoundarySupport\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:UpdateRole\" , \"iam:DeleteRole\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:role/????\" ] }, { \"Sid\" : \"CreateRoles\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreateRole\" , \"iam:AttachRolePolicy\" , \"iam:DetachRolePolicy\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:role/????\" ], \"Condition\" : { \"StringEquals\" : { \"iam:PermissionsBoundary\" : \"arn:aws:iam::ACCOUNT_ID:policy/webadminpermissionboundary\" } } }, { \"Sid\" : \"LambdaFullAccesswithResourceRestrictions\" , \"Effect\" : \"Allow\" , \"Action\" : \"lambda:*\" , \"Resource\" : \"arn:aws:lambda:us-east-2:ACCOUNT_ID:function:????\" }, { \"Sid\" : \"PassRoletoLambda\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:PassRole\" , \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:role/????\" , \"Condition\" : { \"StringLikeIfExists\" : { \"iam:PassedToService\" : \"lambda.amazonaws.com\" } } }, { \"Sid\" : \"AdditionalPermissionsforLambda\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"kms:ListAliases\" , \"logs:Describe*\" , \"logs:ListTagsLogGroup\" , \"logs:FilterLogEvents\" , \"logs:GetLogEvents\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"DenyPermissionBoundaryandPolicyDeleteModify\" , \"Effect\" : \"Deny\" , \"Action\" : [ \"iam:CreatePolicyVersion\" , \"iam:DeletePolicy\" , \"iam:DeletePolicyVersion\" , \"iam:SetDefaultPolicyVersion\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:policy/webadminpermissionboundary\" , \"arn:aws:iam::ACCOUNT_ID:policy/webadminpermissionpolicy\" ] }, { \"Sid\" : \"DenyRolePermissionBoundaryDelete\" , \"Effect\" : \"Deny\" , \"Action\" : \"iam:DeleteRolePermissionsBoundary\" , \"Resource\" : \"*\" } ] } Name the new policy webadminpermissionpolicy and attach it to the webadmin user. Remove the earlier policy you added during the testing. When you are done the webadmin user should have only three policies attached: webadminpermissionpolicy, IAMReadOnlyAccess & AWSLambdaReadOnlyAccess. Again from the browser where you are logged into the console as the webadmin , verify the user can create a policy, create a role (attaching both a permission policy and permissions boundary to the role) and finally create a Lambda function into which you will pass that role. Keep in mind the resource restriction. Question Why do we add the Deny for DeletePolicy actions regarding the webadminpermissionboundary & webadminpermissionpolicy? What would happen if we didn't deny the ability to delete permissions boundaries?","title":"Walk Through"},{"location":"permission-boundaries/build/#task-4-gather-info-needed-for-the-verify-phase","text":"","title":"Task 4 Gather info needed for the VERIFY phase"},{"location":"permission-boundaries/build/#walk-through_3","text":"Now that you have setup the IAM user for the web admins, it's time to pass this information on to the next team who will work through the VERIFY tasks. You need to gather some details about your setup and then hand this info to the next team. Here are all of the details you need to pass to another team. If you following the recommended naming conventions than you can use the answers below. If you were given a form to fill out then enter the info into the form. This needs to be given to another team so they can do the VERIFY phase tasks. Your team should collect the VERIFY phase form from another team so you can also work through the VERIFY tasks. IAM users sign-in link: https://Account_ID.signin.aws.amazon.com/console IAM user name: webadmin IAM user password: Resource restriction identifier: permissions boundary name: webadminpermissionboundary Permission policy name: webadminpermissionpolicy Tip Do not hand out this info to the same team that is giving you the info - this way we will end up properly swapping between teams if we have an odd number of teams.","title":"Walk Through"},{"location":"permission-boundaries/build/#click-here-to-go-to-the-verify-phase","text":"","title":"Click here to go to the VERIFY phase"},{"location":"permission-boundaries/verify/","text":"Permission boundaries round VERIFY phase You are now in the VERIFY phase. It is time to put on the hat of the web admins and test out their access. You should have receieved from another team the following information: IAM users sign-in link: https://Account_ID.signin.aws.amazon.com/console IAM user name: webadmin IAM user password: Resource restriction identifier: Permission boundary name: webadminpermissionboundary Permission policy name: webadminpermissionpolicy You will be setting up an IAM policy, an IAM role and a Lambda function. The Lambda function should be able to list files in an S3 bucket. This is how you will verify you are able to do what the web admins are allowed to do. The web admins should not be able to impact any resources in the account that they do not own (e.g. the Application admins) including IAM users, roles, S3 buckets, Lambda functions, etc. Application architecture: Task 1 Create a customer managed IAM policy The first step is to create an IAM policy. This will set the permissions of the role that you will pass to a Lambda function. Since the function will be working with S3 and since the point of this is to show how permission boundaries work, use the following policy which grants basic Lambda logging permissions and S3 full access. Keep in mind the resource restrictions put in place which will require you to use a certain name for the policy. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ \"logs:CreateLogGroup\" , \"logs:CreateLogStream\" , \"logs:PutLogEvents\" , \"s3:*\" ], \"Resource\" : \"*\" } ] } Task 2 Create an IAM role Next create an IAM Role. Choose Lambda as the service for this role. Attach the policy you just created and the permission boundary (which should be named: webadminpermissionboundary ) Keep in mind the resource restrictions put in place which will require you to use a certain name for the role. Task 3 Create a Lambda function Finally you will create a Node.js 8.10 Lambda function using the code below and attach the IAM role you just created to it. You will need to replace \"WEB_ADMIN_BUCKET_NAME\" with the bucket from the account that begins with \"web-admins-\" and ends in \"-data\" const AWS = require ( 'aws-sdk' ); const s3 = new AWS . S3 (); exports . handler = async ( event ) => { console.log('Loading function') ; const allKeys = [] ; await getKeys({ Bucket : 'WEB_ADMIN_BUCKET_NAME' } , allKeys ); return allKeys ; } ; async function getKeys ( params , keys ) { const response = await s3.listObjectsV2(params).promise() ; response.Contents.forEach(obj => keys.push(obj.Key)) ; if (response.IsTruncated) { const newParams = Object.assign({ } , params ); newParams . ContinuationToken = response . NextContinuationToken ; await getKeys ( newParams , keys ); } } Test the Lambda function and make sure it is generating logs in CloudWatch logs and that it is able to list the objects in the bucket. Task 4 Investigate if you are able to do anything else The final step is to determine if you can do anything else in the account. Can you impact any resources not owned by the web admins?","title":"Verify Phase"},{"location":"permission-boundaries/verify/#permission-boundaries-round-verify-phase","text":"You are now in the VERIFY phase. It is time to put on the hat of the web admins and test out their access. You should have receieved from another team the following information: IAM users sign-in link: https://Account_ID.signin.aws.amazon.com/console IAM user name: webadmin IAM user password: Resource restriction identifier: Permission boundary name: webadminpermissionboundary Permission policy name: webadminpermissionpolicy You will be setting up an IAM policy, an IAM role and a Lambda function. The Lambda function should be able to list files in an S3 bucket. This is how you will verify you are able to do what the web admins are allowed to do. The web admins should not be able to impact any resources in the account that they do not own (e.g. the Application admins) including IAM users, roles, S3 buckets, Lambda functions, etc. Application architecture:","title":"Permission boundaries round VERIFY phase"},{"location":"permission-boundaries/verify/#task-1-create-a-customer-managed-iam-policy","text":"The first step is to create an IAM policy. This will set the permissions of the role that you will pass to a Lambda function. Since the function will be working with S3 and since the point of this is to show how permission boundaries work, use the following policy which grants basic Lambda logging permissions and S3 full access. Keep in mind the resource restrictions put in place which will require you to use a certain name for the policy. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ \"logs:CreateLogGroup\" , \"logs:CreateLogStream\" , \"logs:PutLogEvents\" , \"s3:*\" ], \"Resource\" : \"*\" } ] }","title":"Task 1 Create a customer managed IAM policy"},{"location":"permission-boundaries/verify/#task-2-create-an-iam-role","text":"Next create an IAM Role. Choose Lambda as the service for this role. Attach the policy you just created and the permission boundary (which should be named: webadminpermissionboundary ) Keep in mind the resource restrictions put in place which will require you to use a certain name for the role.","title":"Task 2 Create an IAM role"},{"location":"permission-boundaries/verify/#task-3-create-a-lambda-function","text":"Finally you will create a Node.js 8.10 Lambda function using the code below and attach the IAM role you just created to it. You will need to replace \"WEB_ADMIN_BUCKET_NAME\" with the bucket from the account that begins with \"web-admins-\" and ends in \"-data\" const AWS = require ( 'aws-sdk' ); const s3 = new AWS . S3 (); exports . handler = async ( event ) => { console.log('Loading function') ; const allKeys = [] ; await getKeys({ Bucket : 'WEB_ADMIN_BUCKET_NAME' } , allKeys ); return allKeys ; } ; async function getKeys ( params , keys ) { const response = await s3.listObjectsV2(params).promise() ; response.Contents.forEach(obj => keys.push(obj.Key)) ; if (response.IsTruncated) { const newParams = Object.assign({ } , params ); newParams . ContinuationToken = response . NextContinuationToken ; await getKeys ( newParams , keys ); } } Test the Lambda function and make sure it is generating logs in CloudWatch logs and that it is able to list the objects in the bucket.","title":"Task 3 Create a Lambda function"},{"location":"permission-boundaries/verify/#task-4-investigate-if-you-are-able-to-do-anything-else","text":"The final step is to determine if you can do anything else in the account. Can you impact any resources not owned by the web admins?","title":"Task 4 Investigate if you are able to do anything else"},{"location":"permission-boundaries-advanced/","text":"Permissions boundary workshop - Advanced edition Overview Your company has deployed a production three tier web application on AWS. Various teams work on different aspects of the architecture including the web admins who need to be able to create IAM roles for Lambda functions. In order to let them quickly iterate it was decided that permissions boundaries would be used to delegate permissions to the web admins so they can create the roles needed without being able to escalate their permissions or impact the resources of other teams. It is your assignment to set the permissions up and test them. AWS Service/Feature Coverage : AWS IAM users & roles AWS IAM permissions boundaries AWS IAM IAM friendly names and paths AWS Lambda Agenda The round consists of a BUILD phase followed by a VERIFY phase. Phases BUILD (60 min): First each team will act as the admins of the account and carry out the activities involved in the BUILD phase where they will set up access for the web admins. Then each team will hand credentials for the webadmins IAM role in their account to another team to carry out the VERIFY phase. VERIFY (30 min): In the Verify phase each team will then act as the web admins validate that the requirements were set up correctly in the BUILD phase. Team or Individual Exercise This workshop can be done as a team exercise or individually. If done as part of an AWS sponsored event then you will most likely be split into teams of around 2-3 people (you are of course free to work on your own.) If you are working in a team then try to divide up the tasks. Presentation If you are doing this workshop as part of an AWS event then there will usually be a presentation (lasting about 30 minutes) before the hands-on exercise. Here is the presentation deck . Requirements Click here for the account architecture Account architecture: The goal of this workshop is to set up the web admins so they can create an IAM role and attach it to a Lambda function which will then read an S3 bucket. The web admins need the necessary permissions to do this without also being able to escalate their permissions or impact the resources of other teams in the same AWS account. The web admins should only have access to the following resources: IAM policies and roles they create S3 bucket: The roles the web admins create should only be allowed to list the log files in the webadmins folder of the bucket that starts with \"shared-logging-\" and ends with \"-data\" Click here to go to the BUILD phase","title":"Permissions boundary workshop -<small> Advanced edition </small>"},{"location":"permission-boundaries-advanced/#permissions-boundary-workshop-advanced-edition","text":"","title":"Permissions boundary workshop - Advanced edition "},{"location":"permission-boundaries-advanced/#overview","text":"Your company has deployed a production three tier web application on AWS. Various teams work on different aspects of the architecture including the web admins who need to be able to create IAM roles for Lambda functions. In order to let them quickly iterate it was decided that permissions boundaries would be used to delegate permissions to the web admins so they can create the roles needed without being able to escalate their permissions or impact the resources of other teams. It is your assignment to set the permissions up and test them. AWS Service/Feature Coverage : AWS IAM users & roles AWS IAM permissions boundaries AWS IAM IAM friendly names and paths AWS Lambda","title":" Overview "},{"location":"permission-boundaries-advanced/#agenda","text":"The round consists of a BUILD phase followed by a VERIFY phase.","title":"Agenda"},{"location":"permission-boundaries-advanced/#phases","text":"BUILD (60 min): First each team will act as the admins of the account and carry out the activities involved in the BUILD phase where they will set up access for the web admins. Then each team will hand credentials for the webadmins IAM role in their account to another team to carry out the VERIFY phase. VERIFY (30 min): In the Verify phase each team will then act as the web admins validate that the requirements were set up correctly in the BUILD phase. Team or Individual Exercise This workshop can be done as a team exercise or individually. If done as part of an AWS sponsored event then you will most likely be split into teams of around 2-3 people (you are of course free to work on your own.) If you are working in a team then try to divide up the tasks.","title":"Phases"},{"location":"permission-boundaries-advanced/#presentation","text":"If you are doing this workshop as part of an AWS event then there will usually be a presentation (lasting about 30 minutes) before the hands-on exercise. Here is the presentation deck .","title":"Presentation"},{"location":"permission-boundaries-advanced/#requirements","text":"Click here for the account architecture Account architecture: The goal of this workshop is to set up the web admins so they can create an IAM role and attach it to a Lambda function which will then read an S3 bucket. The web admins need the necessary permissions to do this without also being able to escalate their permissions or impact the resources of other teams in the same AWS account. The web admins should only have access to the following resources: IAM policies and roles they create S3 bucket: The roles the web admins create should only be allowed to list the log files in the webadmins folder of the bucket that starts with \"shared-logging-\" and ends with \"-data\"","title":"Requirements"},{"location":"permission-boundaries-advanced/#click-here-to-go-to-the-build-phase","text":"","title":"Click here to go to the BUILD phase"},{"location":"permission-boundaries-advanced/build/","text":"Permissions boundaries workshop - Advanced edition Build phase The three elements of a permissions boundary are represented below. When your team does the BUILD tasks you will act as the admins. When your team does the VERIFY tasks you will act as the delegated admins (webadmins). The delegated admins (webadmins) will create roles that can be considered \"bound\" since they will have a permissions boundary attached. Setup Instructions To setup your environment expand one of the following drop-downs : Click here if AWS provided an account to you (usually at an AWS event) Step 1: Login to the console and run the CloudFormation template Console Login: Your team should have been given a URL and login credentials. This will allow you to login to the account using AWS SSO. Browse to that URL and login. After you login click AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for Management console . Click on that and you will be taken the AWS console. Make sure the region is set to US East 2 (Ohio) Launch the CloudFormation stack. Click the Deploy to AWS button below. Region Deploy US East 2 (Ohio) Click Next on the Select Template section. Click Next on the Specify Details section (the stack name will be already filled - you can change it or leave it as is) Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack shows CREATE_COMPLETE . Step 2 : Connect to Cloud9 (this is where you will be doing all the hands on work)** Navigate to Cloud9 in the AWS console Open the Cloud9 IDE environment called workshop-environment This is where you will run the commands. Move on to Task 1. Click here if you are using your own AWS account (whether you are at an AWS event, a separate event or online on your own) Log in to your account however you would normally. CloudFormation: Launch the CloudFormation stack below to setup the environment: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Select Template section. Click Next on the Specify Details section (the stack name will already be filled - you can change it or leave it as is) Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Move on to Task 1. Attention Throughout the workshop, keep in mind where you need to add the Account ID, correctly use pathing and change the region specified if needed (although if you are taking this as part of an AWS event, just use the already specified us-east-2.) Missing any of these items can result in problems and errors like \"An error occurred (MalformedPolicyDocument) when calling the CreatePolicy operation: The policy failed legacy parsing\" . Task 1 Create the webadmins role First you will create an IAM role for the webadmins (Initially this role will trust your own AWS account but in the Verify phase you will configure it to trust the other team's account.): Use the following JSON to create a file name trustpolicy1 for the trust (assume role) policy: { \"Version\": \"2012-10-17\", \"Statement\": { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::Account_ID:root\"}, \"Action\": \"sts:AssumeRole\" } } Create the webadmin role: aws iam create-role --role-name webadmins --assume-role-policy-document file://trustpolicy1 Add the Lambda Read Only policy to the role aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSLambdaReadOnlyAccess --role-name webadmins Task 2 Create the permissions boundary for the webadmins Next you will create the policy that will be used as the permissions boundary. The permissions boundary should only allow the following actions: Create log groups, create log streams, put logs and list the files in the webadmins folder of the bucket that starts with \"shared-logging-\" and ends in \"-data\" : Use the following JSON to create a file named boundarydoc for the policy document: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"CreateLogGroup\" , \"Effect\" : \"Allow\" , \"Action\" : \"logs:CreateLogGroup\" , \"Resource\" : \"arn:aws:logs:us-east-2:ACCOUNT_ID:*\" }, { \"Sid\" : \"CreateLogStreamandEvents\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"logs:CreateLogStream\" , \"logs:PutLogEvents\" ], \"Resource\" : \"arn:aws:logs:us-east-2:ACCOUNT_ID:log-group:/aws/lambda/*:*\" }, { \"Sid\" : \"AllowedS3GetObject\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"s3:List*\" ], \"Resource\" : \"arn:aws:s3:::shared-logging-ACCOUNT_ID-us-east-2-data\" , \"Condition\" : { \"StringEquals\" : { \"s3:prefix\" : \"webadmins\" } } } ] } Create the policy: aws iam create-policy --policy-name webadminspermissionsboundary --policy-document file://boundarydoc Question What will the webadmins attach the permissions boundary to? How does a permissions boundary differ from a standard IAM policy? How could you test the permissions boundary at this point? Task 3 Create the permission policy for the webadmins Hint IMPORTANT!!!! - The question marks ???? in the policy below should be replaced with something that could act as part of a resource restriction. The end result is that you will have a pathing requirement for the roles and policies. Replacing the ???? is one of the key challenges in this workshop and probably the most confusing part. Talk to a faciliator if you have issues with this. Next you will create the policy that will be attached to the webadmins role. Use the following JSON to create a file named policydoc for the policy document: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"CreateCustomerManagedPolicies\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreatePolicy\" , \"iam:DeletePolicy\" , \"iam:CreatePolicyVersion\" , \"iam:DeletePolicyVersion\" , \"iam:SetDefaultPolicyVersion\" ], \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:policy/webadmins/????\" }, { \"Sid\" : \"RoleandPolicyActionswithnoPermissionBoundarySupport\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:UpdateRole\" , \"iam:DeleteRole\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:role/webadmins/????\" ] }, { \"Sid\" : \"CreateRoles\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreateRole\" , \"iam:AttachRolePolicy\" , \"iam:DetachRolePolicy\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:role/webadmins/????\" ], \"Condition\" : { \"StringEquals\" : { \"iam:PermissionsBoundary\" : \"arn:aws:iam::ACCOUNT_ID:policy/webadminspermissionsboundary\" } } }, { \"Sid\" : \"LambdaFullAccess\" , \"Effect\" : \"Allow\" , \"Action\" : \"lambda:*\" , \"Resource\" : \"arn:aws:lambda:us-east-2:ACCOUNT_ID:function:*\" }, { \"Sid\" : \"PassRoletoLambda\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:PassRole\" , \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:role/webadmins/????\" , \"Condition\" : { \"StringLikeIfExists\" : { \"iam:PassedToService\" : \"lambda.amazonaws.com\" } } }, { \"Sid\" : \"AdditionalPermissionsforLambda\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"kms:ListAliases\" , \"logs:Describe*\" , \"logs:ListTagsLogGroup\" , \"logs:FilterLogEvents\" , \"logs:GetLogEvents\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"DenyPermissionBoundaryandPolicyDeleteModify\" , \"Effect\" : \"Deny\" , \"Action\" : [ \"iam:CreatePolicyVersion\" , \"iam:DeletePolicy\" , \"iam:DeletePolicyVersion\" , \"iam:SetDefaultPolicyVersion\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:policy/webadminspermissionsboundary\" , \"arn:aws:iam::ACCOUNT_ID:policy/webadminspermissionpolicy\" ] }, { \"Sid\" : \"DenyRolePermissionBoundaryDelete\" , \"Effect\" : \"Deny\" , \"Action\" : \"iam:DeleteRolePermissionsBoundary\" , \"Resource\" : \"*\" } ] } Create the policy named webadminspermissionpolicy : aws iam create-policy --policy-name webadminspermissionpolicy --policy-document file://policydoc Attach the policy to the webadmins role aws iam attach-role-policy --role-name webadmins --policy-arn arn:aws:iam::Account_ID:policy/webadminspermissionpolicy When you are done the webadmins role should have these two policies attached: webadminspermissionpolicy & AWSLambdaReadOnlyAccess. Question Why were there some blocks above in the policy that used the permissions boundary condition and some that did not? Why are we using pathing here? There are two ways of doing resource restrictions: naming and pathing. Which option allows you to create policies using both the AWS Console and CLI? Why do we add the Deny for DeletePolicy actions regarding the webadminspermissionsboundary & webadminspermissionpolicy? Task 4 Test the webadmins permissions It's time to check your work and make sure the webadmins are set up properly. The instructions for doing so are in the VERIFY phase. Go to that phase to check your work before handing this off to another team. You are free to skip the check if you are confident in your work and just go on to Task 5. Task 5 Gather info needed for the VERIFY phase Now that you have setup access for the webadmins, it's time to pass this information on to the next team who will work through the VERIFY tasks. If you are doing this workshop online on your own then you can just run through the VERIFY phase yourself (skip this task). Get the Account ID from the other team so you can add that to the trust policy on the webadmin role Use the following JSON to create a file name trustpolicy2 for the trust (assume role) policy (replace ACCOUNT_ID with your account ID so you can still test this and the ACCOUNT_ID_OTHER_TEAM with the other team's account ID:) {\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::YOUR_ACCOUNT_ID:root\",\"arn:aws:iam::OTHER_TEAM_ACCOUNT_ID_:root\"]},\"Action\":\"sts:AssumeRole\"}]} Update the trust policy on the webadmins roles so both your team and the verify team can assume the role aws iam update-assume-role-policy --role-name webadmins --policy-document file://trustpolicy2 If you were given a form to fill out then enter the info into the form and hand it to another group (or send this to the other group using whatever method is easiest.) Information to pass (recommended names for certain objects provided below - only change if you didn't go with the recommended names): Webadmins role ARN: arn:aws:iam:: YOUR_ACCOUNT_ID :role/ webadmins Resource restriction for both the roles and policies: /webadmins/ Resource restriction you used Permissions boundary name: webadminspermissionsboundary Permission policy name: webadminspermissionpolicy Click here to go to the VERIFY phase","title":"Permissions boundaries workshop - <small> Advanced edition </small>"},{"location":"permission-boundaries-advanced/build/#permissions-boundaries-workshop-advanced-edition","text":"","title":"Permissions boundaries workshop -  Advanced edition "},{"location":"permission-boundaries-advanced/build/#build-phase","text":"The three elements of a permissions boundary are represented below. When your team does the BUILD tasks you will act as the admins. When your team does the VERIFY tasks you will act as the delegated admins (webadmins). The delegated admins (webadmins) will create roles that can be considered \"bound\" since they will have a permissions boundary attached.","title":" Build phase "},{"location":"permission-boundaries-advanced/build/#setup-instructions","text":"","title":"Setup Instructions"},{"location":"permission-boundaries-advanced/build/#to-setup-your-environment-expand-one-of-the-following-drop-downs","text":"Click here if AWS provided an account to you (usually at an AWS event)","title":"To setup your environment expand one of the following drop-downs:"},{"location":"permission-boundaries-advanced/build/#step-1-login-to-the-console-and-run-the-cloudformation-template","text":"Console Login: Your team should have been given a URL and login credentials. This will allow you to login to the account using AWS SSO. Browse to that URL and login. After you login click AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for Management console . Click on that and you will be taken the AWS console. Make sure the region is set to US East 2 (Ohio) Launch the CloudFormation stack. Click the Deploy to AWS button below. Region Deploy US East 2 (Ohio) Click Next on the Select Template section. Click Next on the Specify Details section (the stack name will be already filled - you can change it or leave it as is) Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack shows CREATE_COMPLETE .","title":"Step 1: Login to the console and run the CloudFormation template"},{"location":"permission-boundaries-advanced/build/#step-2-connect-to-cloud9-this-is-where-you-will-be-doing-all-the-hands-on-work","text":"Navigate to Cloud9 in the AWS console Open the Cloud9 IDE environment called workshop-environment This is where you will run the commands. Move on to Task 1. Click here if you are using your own AWS account (whether you are at an AWS event, a separate event or online on your own) Log in to your account however you would normally. CloudFormation: Launch the CloudFormation stack below to setup the environment: Region Deploy US East 2 (Ohio) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. Click Next on the Select Template section. Click Next on the Specify Details section (the stack name will already be filled - you can change it or leave it as is) Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . Move on to Task 1. Attention Throughout the workshop, keep in mind where you need to add the Account ID, correctly use pathing and change the region specified if needed (although if you are taking this as part of an AWS event, just use the already specified us-east-2.) Missing any of these items can result in problems and errors like \"An error occurred (MalformedPolicyDocument) when calling the CreatePolicy operation: The policy failed legacy parsing\" .","title":"Step 2 : Connect to Cloud9 (this is where you will be doing all the hands on work)**"},{"location":"permission-boundaries-advanced/build/#task-1-create-the-webadmins-role","text":"First you will create an IAM role for the webadmins (Initially this role will trust your own AWS account but in the Verify phase you will configure it to trust the other team's account.): Use the following JSON to create a file name trustpolicy1 for the trust (assume role) policy: { \"Version\": \"2012-10-17\", \"Statement\": { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::Account_ID:root\"}, \"Action\": \"sts:AssumeRole\" } } Create the webadmin role: aws iam create-role --role-name webadmins --assume-role-policy-document file://trustpolicy1 Add the Lambda Read Only policy to the role aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSLambdaReadOnlyAccess --role-name webadmins","title":"Task 1 Create the webadmins role"},{"location":"permission-boundaries-advanced/build/#task-2-create-the-permissions-boundary-for-the-webadmins","text":"Next you will create the policy that will be used as the permissions boundary. The permissions boundary should only allow the following actions: Create log groups, create log streams, put logs and list the files in the webadmins folder of the bucket that starts with \"shared-logging-\" and ends in \"-data\" : Use the following JSON to create a file named boundarydoc for the policy document: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"CreateLogGroup\" , \"Effect\" : \"Allow\" , \"Action\" : \"logs:CreateLogGroup\" , \"Resource\" : \"arn:aws:logs:us-east-2:ACCOUNT_ID:*\" }, { \"Sid\" : \"CreateLogStreamandEvents\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"logs:CreateLogStream\" , \"logs:PutLogEvents\" ], \"Resource\" : \"arn:aws:logs:us-east-2:ACCOUNT_ID:log-group:/aws/lambda/*:*\" }, { \"Sid\" : \"AllowedS3GetObject\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"s3:List*\" ], \"Resource\" : \"arn:aws:s3:::shared-logging-ACCOUNT_ID-us-east-2-data\" , \"Condition\" : { \"StringEquals\" : { \"s3:prefix\" : \"webadmins\" } } } ] } Create the policy: aws iam create-policy --policy-name webadminspermissionsboundary --policy-document file://boundarydoc Question What will the webadmins attach the permissions boundary to? How does a permissions boundary differ from a standard IAM policy? How could you test the permissions boundary at this point?","title":"Task 2 Create the permissions boundary for the webadmins"},{"location":"permission-boundaries-advanced/build/#task-3-create-the-permission-policy-for-the-webadmins","text":"Hint IMPORTANT!!!! - The question marks ???? in the policy below should be replaced with something that could act as part of a resource restriction. The end result is that you will have a pathing requirement for the roles and policies. Replacing the ???? is one of the key challenges in this workshop and probably the most confusing part. Talk to a faciliator if you have issues with this. Next you will create the policy that will be attached to the webadmins role. Use the following JSON to create a file named policydoc for the policy document: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"CreateCustomerManagedPolicies\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreatePolicy\" , \"iam:DeletePolicy\" , \"iam:CreatePolicyVersion\" , \"iam:DeletePolicyVersion\" , \"iam:SetDefaultPolicyVersion\" ], \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:policy/webadmins/????\" }, { \"Sid\" : \"RoleandPolicyActionswithnoPermissionBoundarySupport\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:UpdateRole\" , \"iam:DeleteRole\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:role/webadmins/????\" ] }, { \"Sid\" : \"CreateRoles\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"iam:CreateRole\" , \"iam:AttachRolePolicy\" , \"iam:DetachRolePolicy\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:role/webadmins/????\" ], \"Condition\" : { \"StringEquals\" : { \"iam:PermissionsBoundary\" : \"arn:aws:iam::ACCOUNT_ID:policy/webadminspermissionsboundary\" } } }, { \"Sid\" : \"LambdaFullAccess\" , \"Effect\" : \"Allow\" , \"Action\" : \"lambda:*\" , \"Resource\" : \"arn:aws:lambda:us-east-2:ACCOUNT_ID:function:*\" }, { \"Sid\" : \"PassRoletoLambda\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:PassRole\" , \"Resource\" : \"arn:aws:iam::ACCOUNT_ID:role/webadmins/????\" , \"Condition\" : { \"StringLikeIfExists\" : { \"iam:PassedToService\" : \"lambda.amazonaws.com\" } } }, { \"Sid\" : \"AdditionalPermissionsforLambda\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"kms:ListAliases\" , \"logs:Describe*\" , \"logs:ListTagsLogGroup\" , \"logs:FilterLogEvents\" , \"logs:GetLogEvents\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"DenyPermissionBoundaryandPolicyDeleteModify\" , \"Effect\" : \"Deny\" , \"Action\" : [ \"iam:CreatePolicyVersion\" , \"iam:DeletePolicy\" , \"iam:DeletePolicyVersion\" , \"iam:SetDefaultPolicyVersion\" ], \"Resource\" : [ \"arn:aws:iam::ACCOUNT_ID:policy/webadminspermissionsboundary\" , \"arn:aws:iam::ACCOUNT_ID:policy/webadminspermissionpolicy\" ] }, { \"Sid\" : \"DenyRolePermissionBoundaryDelete\" , \"Effect\" : \"Deny\" , \"Action\" : \"iam:DeleteRolePermissionsBoundary\" , \"Resource\" : \"*\" } ] } Create the policy named webadminspermissionpolicy : aws iam create-policy --policy-name webadminspermissionpolicy --policy-document file://policydoc Attach the policy to the webadmins role aws iam attach-role-policy --role-name webadmins --policy-arn arn:aws:iam::Account_ID:policy/webadminspermissionpolicy When you are done the webadmins role should have these two policies attached: webadminspermissionpolicy & AWSLambdaReadOnlyAccess. Question Why were there some blocks above in the policy that used the permissions boundary condition and some that did not? Why are we using pathing here? There are two ways of doing resource restrictions: naming and pathing. Which option allows you to create policies using both the AWS Console and CLI? Why do we add the Deny for DeletePolicy actions regarding the webadminspermissionsboundary & webadminspermissionpolicy?","title":"Task 3 Create the permission policy for the webadmins"},{"location":"permission-boundaries-advanced/build/#task-4-test-the-webadmins-permissions","text":"It's time to check your work and make sure the webadmins are set up properly. The instructions for doing so are in the VERIFY phase. Go to that phase to check your work before handing this off to another team. You are free to skip the check if you are confident in your work and just go on to Task 5.","title":"Task 4 Test the webadmins permissions"},{"location":"permission-boundaries-advanced/build/#task-5-gather-info-needed-for-the-verify-phase","text":"Now that you have setup access for the webadmins, it's time to pass this information on to the next team who will work through the VERIFY tasks. If you are doing this workshop online on your own then you can just run through the VERIFY phase yourself (skip this task). Get the Account ID from the other team so you can add that to the trust policy on the webadmin role Use the following JSON to create a file name trustpolicy2 for the trust (assume role) policy (replace ACCOUNT_ID with your account ID so you can still test this and the ACCOUNT_ID_OTHER_TEAM with the other team's account ID:) {\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"arn:aws:iam::YOUR_ACCOUNT_ID:root\",\"arn:aws:iam::OTHER_TEAM_ACCOUNT_ID_:root\"]},\"Action\":\"sts:AssumeRole\"}]} Update the trust policy on the webadmins roles so both your team and the verify team can assume the role aws iam update-assume-role-policy --role-name webadmins --policy-document file://trustpolicy2 If you were given a form to fill out then enter the info into the form and hand it to another group (or send this to the other group using whatever method is easiest.) Information to pass (recommended names for certain objects provided below - only change if you didn't go with the recommended names): Webadmins role ARN: arn:aws:iam:: YOUR_ACCOUNT_ID :role/ webadmins Resource restriction for both the roles and policies: /webadmins/ Resource restriction you used Permissions boundary name: webadminspermissionsboundary Permission policy name: webadminspermissionpolicy","title":"Task 5 Gather info needed for the VERIFY phase"},{"location":"permission-boundaries-advanced/build/#click-here-to-go-to-the-verify-phase","text":"","title":"Click here to go to the VERIFY phase"},{"location":"permission-boundaries-advanced/verify/","text":"Permission boundaries workshop - Advanced edition VERIFY phase You are now in the VERIFY phase. It is time to put on the hat of the webadmins and test out their permissions. Permissions boundaries are about delegation so verifying (acting as the delegated admins) the work of another team that did the build phase (acting as the admins) will simulate that experience. As the webadmins you will do the following: * Create an IAM policy, create an IAM role (and attach that policy), create a Lambda function (and attach that role) If doing this as part of an AWS event you should have received from another team the following information: * Webadmins role ARN: arn:aws:iam::`ACCOUNT_ID_of_Other_Team`:role/**webadmins** * Resource restriction for both the roles and policies: /webadmins/`Resource restriction` * Permissions boundary name: **webadminspermissionsboundary** * Permission policy name: **webadminspermissionpolicy** To carry out these tasks as the webadmins, you will need to assume that role. In order to assume the webadmins role, add the following to the AWS CLI config file found in the ~/.aws/config directory. Since you are assuming the role of another team, enter the Account ID of that team in the ARN. Remember to use the --profile parameter for all of the commands in the following tasks. [profile webadmins] role_arn = arn:aws:iam::Account_ID_of_Other_Team:role/webadmins source_profile = Name_of_the_Credential_Profile Application architecture Task 1 Create a policy First you will create a permission policy which just needs to allow log file creation and s3:ListBucket. You are in a hurry though, like many developers, and give the role full S3 permissions. The policy you create here will later be attached to the role you create in Task 2 which will then be passed to a Lambda function you will create in Task 3. Use the following JSON to create a file named verifypolicydoc (replace the Account ID): {\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\",\"s3:*\"],\"Resource\":\"*\"}]} Create the policy ( there is a key parameter missing from the command below. Check the AWS CLI documentation ) aws iam create-policy --policy-name NAME_OF_POLICY --policy-document file://verifypolicydoc Task 2 Create a role The role you create here will be passed to the Lambda function you create in the next task Use the following JSON to create a file named verifytrustpolicy (replace the Account ID): { \"Version\": \"2012-10-17\", \"Statement\": { \"Effect\": \"Allow\", \"Principal\": { \"Service\": \"lambda.amazonaws.com\"}, \"Action\": \"sts:AssumeRole\" } } Create the role ( there is a key parameter missing from the command below. Check the AWS CLI documentation ) aws iam create-role --role-name NAME_OF_ROLE --path /NAME_OF_PATH/ --assume-role-policy-document file://verifytrustpolicy Attach the policy you created in Task 1 to the role: aws iam attach-role-policy --policy-arn arn:aws:iam::Account_ID:policy/NAME_OF_PATH/NAME_OF_POLICY --role-name NAME_OF_ROLE Task 3 Create and test a Lambda function Finally you will create a Node.js 8.10 Lambda function using the sample code below and pass the IAM role you just created Create a file named index.js using the code sample below and then zip the file ( zip lambdafunction.zip index.js ). Replace \"SHARED_LOGGING_BUCKET_NAME\" with the name of bucket that begins with \"shared-logging-\" and ends in \"-data\" . In order to get the bucket name, just run aws s3 ls using the webadmins role.) const AWS = require ( 'aws-sdk' ); const s3 = new AWS . S3 (); exports . handler = async ( event ) => { console.log('Loading function') ; const allKeys = [] ; await getKeys({ Bucket : 'SHARED_LOGGING_BUCKET_NAME' , Prefix : 'webadmins' } , allKeys ); return allKeys ; } ; async function getKeys ( params , keys ) { const response = await s3.listObjectsV2(params).promise() ; response.Contents.forEach(obj => keys.push(obj.Key)) ; if (response.IsTruncated) { const newParams = Object.assign({ } , params ); newParams . ContinuationToken = response . NextContinuationToken ; await getKeys ( newParams , keys ); } } Create a Lambda function aws lambda create-function --function-name NAME_OF_FUNCTION --runtime nodejs8.10 --role arn:aws:iam::Account_ID:role/NAME_OF_PATH/NAME_OF_ROLE --handler index.handler --region us-east-2 --zip-file fileb://NAME_OF_ZIP_FILE Invoke the Lambda function and make sure it is generating logs in CloudWatch logs and that it is able to list the objects in the bucket. aws lambda invoke --function-name NAME_OF_FUNCTION --region us-east-2 --invocation-type RequestResponse outputfile.txt Examine the output file. It should show a number of log files in the S3 bucket that the Lambda function read. If you see files marked that webadmins/you-should-SEE-this-file--webadmins... then you have successfully verified that the webadmins can do their job. Congratulations! Task 3 Cleanup To cleanup you need to delete the CloudFormation stack named Perm-Bound-Adv . This will also remove the Cloud9 environment.","title":"Permission boundaries workshop <small>- Advanced edition</small>"},{"location":"permission-boundaries-advanced/verify/#permission-boundaries-workshop-advanced-edition","text":"","title":"Permission boundaries workshop - Advanced edition"},{"location":"permission-boundaries-advanced/verify/#verify-phase","text":"You are now in the VERIFY phase. It is time to put on the hat of the webadmins and test out their permissions. Permissions boundaries are about delegation so verifying (acting as the delegated admins) the work of another team that did the build phase (acting as the admins) will simulate that experience. As the webadmins you will do the following: * Create an IAM policy, create an IAM role (and attach that policy), create a Lambda function (and attach that role) If doing this as part of an AWS event you should have received from another team the following information: * Webadmins role ARN: arn:aws:iam::`ACCOUNT_ID_of_Other_Team`:role/**webadmins** * Resource restriction for both the roles and policies: /webadmins/`Resource restriction` * Permissions boundary name: **webadminspermissionsboundary** * Permission policy name: **webadminspermissionpolicy** To carry out these tasks as the webadmins, you will need to assume that role. In order to assume the webadmins role, add the following to the AWS CLI config file found in the ~/.aws/config directory. Since you are assuming the role of another team, enter the Account ID of that team in the ARN. Remember to use the --profile parameter for all of the commands in the following tasks. [profile webadmins] role_arn = arn:aws:iam::Account_ID_of_Other_Team:role/webadmins source_profile = Name_of_the_Credential_Profile Application architecture","title":"VERIFY phase"},{"location":"permission-boundaries-advanced/verify/#task-1-create-a-policy","text":"","title":"Task 1 Create a policy"},{"location":"permission-boundaries-advanced/verify/#first-you-will-create-a-permission-policy-which-just-needs-to-allow-log-file-creation-and-s3listbucket-you-are-in-a-hurry-though-like-many-developers-and-give-the-role-full-s3-permissions-the-policy-you-create-here-will-later-be-attached-to-the-role-you-create-in-task-2-which-will-then-be-passed-to-a-lambda-function-you-will-create-in-task-3","text":"Use the following JSON to create a file named verifypolicydoc (replace the Account ID): {\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\",\"s3:*\"],\"Resource\":\"*\"}]} Create the policy ( there is a key parameter missing from the command below. Check the AWS CLI documentation ) aws iam create-policy --policy-name NAME_OF_POLICY --policy-document file://verifypolicydoc","title":"First you will create a permission policy which just needs to allow log file creation and s3:ListBucket. You are in a hurry though, like many developers, and give the role full S3 permissions. The policy you create here will later be attached to the role you create in Task 2 which will then be passed to a Lambda function you will create in Task 3."},{"location":"permission-boundaries-advanced/verify/#task-2-create-a-role","text":"","title":"Task 2 Create a role"},{"location":"permission-boundaries-advanced/verify/#the-role-you-create-here-will-be-passed-to-the-lambda-function-you-create-in-the-next-task","text":"Use the following JSON to create a file named verifytrustpolicy (replace the Account ID): { \"Version\": \"2012-10-17\", \"Statement\": { \"Effect\": \"Allow\", \"Principal\": { \"Service\": \"lambda.amazonaws.com\"}, \"Action\": \"sts:AssumeRole\" } } Create the role ( there is a key parameter missing from the command below. Check the AWS CLI documentation ) aws iam create-role --role-name NAME_OF_ROLE --path /NAME_OF_PATH/ --assume-role-policy-document file://verifytrustpolicy Attach the policy you created in Task 1 to the role: aws iam attach-role-policy --policy-arn arn:aws:iam::Account_ID:policy/NAME_OF_PATH/NAME_OF_POLICY --role-name NAME_OF_ROLE","title":"The role you create here will be passed to the Lambda function you create in the next task"},{"location":"permission-boundaries-advanced/verify/#task-3-create-and-test-a-lambda-function","text":"","title":"Task 3 Create and test a Lambda function"},{"location":"permission-boundaries-advanced/verify/#finally-you-will-create-a-nodejs-810-lambda-function-using-the-sample-code-below-and-pass-the-iam-role-you-just-created","text":"Create a file named index.js using the code sample below and then zip the file ( zip lambdafunction.zip index.js ). Replace \"SHARED_LOGGING_BUCKET_NAME\" with the name of bucket that begins with \"shared-logging-\" and ends in \"-data\" . In order to get the bucket name, just run aws s3 ls using the webadmins role.) const AWS = require ( 'aws-sdk' ); const s3 = new AWS . S3 (); exports . handler = async ( event ) => { console.log('Loading function') ; const allKeys = [] ; await getKeys({ Bucket : 'SHARED_LOGGING_BUCKET_NAME' , Prefix : 'webadmins' } , allKeys ); return allKeys ; } ; async function getKeys ( params , keys ) { const response = await s3.listObjectsV2(params).promise() ; response.Contents.forEach(obj => keys.push(obj.Key)) ; if (response.IsTruncated) { const newParams = Object.assign({ } , params ); newParams . ContinuationToken = response . NextContinuationToken ; await getKeys ( newParams , keys ); } } Create a Lambda function aws lambda create-function --function-name NAME_OF_FUNCTION --runtime nodejs8.10 --role arn:aws:iam::Account_ID:role/NAME_OF_PATH/NAME_OF_ROLE --handler index.handler --region us-east-2 --zip-file fileb://NAME_OF_ZIP_FILE Invoke the Lambda function and make sure it is generating logs in CloudWatch logs and that it is able to list the objects in the bucket. aws lambda invoke --function-name NAME_OF_FUNCTION --region us-east-2 --invocation-type RequestResponse outputfile.txt Examine the output file. It should show a number of log files in the S3 bucket that the Lambda function read. If you see files marked that webadmins/you-should-SEE-this-file--webadmins... then you have successfully verified that the webadmins can do their job. Congratulations!","title":"Finally you will create a Node.js 8.10 Lambda function using the sample code below and pass the IAM role you just created"},{"location":"permission-boundaries-advanced/verify/#task-3-cleanup","text":"To cleanup you need to delete the CloudFormation stack named Perm-Bound-Adv . This will also remove the Cloud9 environment.","title":"Task 3 Cleanup"},{"location":"serverless/","text":"Serverless Identity Round Welcome to the world of serverless! Now you may be asking yourself, What is serverless ? Well, it is an architecture paradigm that allows you to create your applications without provisioning or managing any servers. Sounds great, right? Organizations look at building serverless applications as a way of improving their scalability and reducing their operational overhead. The responsibility of the underlying infrastructure is shifted off your plate so you can spend more time focusing on building your applications. So with less infrastructure to manage you are no longer responsible for patching your operating systems and the attack surface you need to worry about has been significantly reduced. But with the use of serverless technologies comes other responsibility. When you hear the word serverless you may think specifically of AWS Lambda but it is important to remember that there are other services used within a serverless application and securing an application involves more than just securing your Lambda functions. In this round you will be focused on improving the identity controls of the WildRydes serverless application (which is borrowed from aws-serverless-workshops and retrofitted for the purposes of this round). You will get exposed to different identity concepts through the use of a variety of services such as AWS IAM , Amazon S3 , Amazon CloudFront , and Amazon Cognito . Upon completion you should have a better idea of how to use native AWS identity controls to improve the security posture of a serverless application. AWS Service/Feature Coverage : S3 Bucket Policies S3 ACLs CloudFront Origin Access Identities Cognito User Pools Cognito Hosted UI Agenda This round is broken down into two tasks, both with a Build and Verify phase. The Build phase involves evaluating, implementing, and enhancing the identity controls of the WildRydes application based on a set of business level functional and non-functional requirements. The Verify phase involves putting on the hat of an end user and testing the controls you put in place to ensure the requirements were met. In addition you will also ensure that a systems administrator is still able to manage the resources. Task 1 (40 min): Reduce the attack surface of the S3 origin Task 2 (35 min): Set up application user management Team or Individual Exercise This workshop can be done as a team exercise or individually. The instructions are written with the assumption that you are working as part of a team but you could just as easily do the steps below individually. If done as part of an AWS sponsored event then you'll be split into teams of around 4-6 people. Each team will do the BUILD phase and then hand off their accounts to another team. Then each team will do the VERIFY phase. Presentation Workshop Presentation Powerpoint Environment setup To setup your environment please expand one of the following dropdown sections (depending on how you're doing this workshop) and follow the instructions: AWS Sponsored Event Browse to the URL provided to you and login. After you login click the AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for the Management console . Click on that and you will be taken to the AWS console. Launch the CloudFormation stack below to setup the WildRydes application: Region Deploy US East 1 (N. Virginia) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE . WildRydes identity overhaul You just joined a new DevOps team who manages a suite of animal-based ride sharing applications. Given your security background you've been embedded on the team to take the lead on security related tasks, evangelize security best practices, and represent your team when interacting with your security organization. Recently, your team inherited a new application; WildRydes. View your application Open the Amazon CloudFormation console (us-east-1) Click on the Identity-RR-Wksp-Serverless-Round stack. Click on Outputs and click on WebsiteCloudFrontURL . As part of the hand off to your team, the product team shared their vision for the application and stated that future iterations will include more dynamic features. After doing an evaluation of the architecture you determined that the WildRydes application is a static website hosted in an S3 bucket. There is a CloudFront Distribution setup to be used as a content delivery network and a Cognito User Pool for user management. Current application architecture After thoroughly evaluating the architecture and doing a threat modeling exercise your team has identified a number of broken features and misconfigurations. It looks as though someone started putting in place certain security controls but were not able to fully implement them. These reviews resulted in the creation of a couple tasks that were added to the backlog for your team and given a high priority. Click Next to move on to Task 1 !","title":"Scenario"},{"location":"serverless/#serverless-identity-round","text":"Welcome to the world of serverless! Now you may be asking yourself, What is serverless ? Well, it is an architecture paradigm that allows you to create your applications without provisioning or managing any servers. Sounds great, right? Organizations look at building serverless applications as a way of improving their scalability and reducing their operational overhead. The responsibility of the underlying infrastructure is shifted off your plate so you can spend more time focusing on building your applications. So with less infrastructure to manage you are no longer responsible for patching your operating systems and the attack surface you need to worry about has been significantly reduced. But with the use of serverless technologies comes other responsibility. When you hear the word serverless you may think specifically of AWS Lambda but it is important to remember that there are other services used within a serverless application and securing an application involves more than just securing your Lambda functions. In this round you will be focused on improving the identity controls of the WildRydes serverless application (which is borrowed from aws-serverless-workshops and retrofitted for the purposes of this round). You will get exposed to different identity concepts through the use of a variety of services such as AWS IAM , Amazon S3 , Amazon CloudFront , and Amazon Cognito . Upon completion you should have a better idea of how to use native AWS identity controls to improve the security posture of a serverless application. AWS Service/Feature Coverage : S3 Bucket Policies S3 ACLs CloudFront Origin Access Identities Cognito User Pools Cognito Hosted UI","title":"Serverless Identity Round"},{"location":"serverless/#agenda","text":"This round is broken down into two tasks, both with a Build and Verify phase. The Build phase involves evaluating, implementing, and enhancing the identity controls of the WildRydes application based on a set of business level functional and non-functional requirements. The Verify phase involves putting on the hat of an end user and testing the controls you put in place to ensure the requirements were met. In addition you will also ensure that a systems administrator is still able to manage the resources. Task 1 (40 min): Reduce the attack surface of the S3 origin Task 2 (35 min): Set up application user management Team or Individual Exercise This workshop can be done as a team exercise or individually. The instructions are written with the assumption that you are working as part of a team but you could just as easily do the steps below individually. If done as part of an AWS sponsored event then you'll be split into teams of around 4-6 people. Each team will do the BUILD phase and then hand off their accounts to another team. Then each team will do the VERIFY phase.","title":"Agenda"},{"location":"serverless/#presentation","text":"Workshop Presentation Powerpoint","title":"Presentation"},{"location":"serverless/#environment-setup","text":"To setup your environment please expand one of the following dropdown sections (depending on how you're doing this workshop) and follow the instructions: AWS Sponsored Event Browse to the URL provided to you and login. After you login click the AWS Account box, then click on the Account ID displayed below that (the red box in the image.) You should see a link below that for the Management console . Click on that and you will be taken to the AWS console. Launch the CloudFormation stack below to setup the WildRydes application: Region Deploy US East 1 (N. Virginia) Click the Deploy to AWS button above (right click and open in a new tab). This will automatically take you to the console to run the template. Click Next on the Specify Template section. On the Specify Details step click Next . Click Next on the Options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE .","title":"Environment setup"},{"location":"serverless/#wildrydes-identity-overhaul","text":"You just joined a new DevOps team who manages a suite of animal-based ride sharing applications. Given your security background you've been embedded on the team to take the lead on security related tasks, evangelize security best practices, and represent your team when interacting with your security organization. Recently, your team inherited a new application; WildRydes.","title":"WildRydes identity overhaul"},{"location":"serverless/#view-your-application","text":"Open the Amazon CloudFormation console (us-east-1) Click on the Identity-RR-Wksp-Serverless-Round stack. Click on Outputs and click on WebsiteCloudFrontURL . As part of the hand off to your team, the product team shared their vision for the application and stated that future iterations will include more dynamic features. After doing an evaluation of the architecture you determined that the WildRydes application is a static website hosted in an S3 bucket. There is a CloudFront Distribution setup to be used as a content delivery network and a Cognito User Pool for user management.","title":"View your application"},{"location":"serverless/#current-application-architecture","text":"After thoroughly evaluating the architecture and doing a threat modeling exercise your team has identified a number of broken features and misconfigurations. It looks as though someone started putting in place certain security controls but were not able to fully implement them. These reviews resulted in the creation of a couple tasks that were added to the backlog for your team and given a high priority. Click Next to move on to Task 1 !","title":"Current application architecture"},{"location":"serverless/task1/","text":"Serverless Identity Round Task 1 Since you are championing the security tasks for your team, you pick up the two tasks for the WildRydes application. Please read through and complete the following tasks. Good Luck! Build Phase Reduce the attack surface of the S3 origin Ensure the application serves content out through the CloudFront Distribution and that your end users can only access the application through CloudFront URLs and not Amazon S3 URLs. As part of this configuration your end users should not be able to affect the availability or integrity of the application. Key Security Benefits Obfuscates the S3 origin Forces traffic over HTTPS with custom certificates Adds DDoS protection to your application and enables the future use of AWS WAF and AWS Shield View the Existing Policy First, view the existing S3 bucket policy to see what permissions the previous engineers created. Go to the Amazon S3 console Click on the identity-wksp-serverless-< ACCOUNT# >-us-east-1-wildrydes bucket. Click on the Permissions tab and then click on Bucket Policy . What's wrong with this policy? What does \"Principal\": \"*\" mean? Both \"Principal\": \"*\" and \"Principal\":{\"AWS\":\"*\"} grant permission to everyone (also referred to as anonymous access). Use caution when granting anonymous access to your S3 bucket. When you grant anonymous access, anyone in the world can access your bucket. We highly recommend that you never grant any kind of anonymous write access to your S3 bucket. Modify Principal Since the current bucket allows for anonymous access, you need to change this to only allow access from the CloudFront Distribution. Go to the Amazon CloudFront console. You should see a Web Distribution for the WildRydes web application. Click on Origin Access Identities in the left navigation. You should see an identity named Unicorn OAI . CloudFront Origin Access Identity An Origin Access Identity (OAI) is a special CloudFront identity that you can associate with a Distribution in order restrict access using AWS IAM. You can also find the OAI by viewing your Web Distribution Copy down the ID. Go back to the Amazon S3 console and open up the bucket policy. Replace the principal with the following and click save : \"Principal\" : { \"AWS\" : \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity <OAI ID>\" } , Info You could also use the canonical user id as the principal: \"CanonicalUser\": \"<OAI S3CanonicalUserId>\" Modify Actions Now that the principal is restricted to the identity associated with the CloudFront distribution you can take a closer look at the permissions. Go back to the Amazon S3 console and open up the bucket policy. Does CloudFront really need access to Delete Objects? The distribution is acting as a CDN for the static site so it only needs read access to the S3 bucket. Change the actions to ensure an end user can not affect the integrity of the site. Test the new bucket policy Now that the bucket policy has been updated, go validate that you can not access the website using an S3 URL. Open the Amazon CloudFormation console (us-east-1) Click on the Identity-RR-Wksp-Serverless-Round stack. Click on Outputs and click on WebsiteS3URL . Are you still able to access the site using the S3 URL? Solve the Mystery So you've modified the bucket policy to restrict access to read only actions from the CloudFront Distribution but for some reason you are still able to access the site using S3 URLs. Do some investigation into why this is the case and put in the additional control necessary to restrict the traffic. Tip What other access controls exist within S3? Look into the following resources: S3 Block Public Access (easiest) AWS IAM Policy Elements: NotPrincipal (hardest) Be sure to clear your cache when testing! Verify Phase Reduce the attack surface of the S3 origin Now that the additional identity control has been added to the application, you have been tasked with acting as an end user and manually testing to verify that the control has been put in place correctly and that the requirements have been met. Ensure the application serves content out through the CloudFront Distribution and that your end users can only access the application through CloudFront URLs and not Amazon S3 URLs. As part of this configuration your end users should not be able to affect the availability or integrity of the application. Verification Checklist You can access the site through the CloudFront Distribution URL (<WebsiteCloudFrontURL>). You are restricted from accessing any of the application resources through S3 URLs (<WebsiteS3URL>). Try some deep links (e.g. <WebsiteS3URL>/js/vendor/unicorn-icon) You can not delete or modify any of the application resources through the CloudFront Distribution. Try using something like curl or Postman to make requests with different HTTP verbs (e.g. Delete). Below is an example using curl: curl -i -X DELETE <WebsiteCloudFrontURL>/index.html After you have completed task you can move on to task 2.","title":"Task 1"},{"location":"serverless/task1/#serverless-identity-round-task-1","text":"Since you are championing the security tasks for your team, you pick up the two tasks for the WildRydes application. Please read through and complete the following tasks. Good Luck!","title":"Serverless Identity Round Task 1"},{"location":"serverless/task1/#build-phase-reduce-the-attack-surface-of-the-s3-origin","text":"Ensure the application serves content out through the CloudFront Distribution and that your end users can only access the application through CloudFront URLs and not Amazon S3 URLs. As part of this configuration your end users should not be able to affect the availability or integrity of the application. Key Security Benefits Obfuscates the S3 origin Forces traffic over HTTPS with custom certificates Adds DDoS protection to your application and enables the future use of AWS WAF and AWS Shield","title":"Build Phase Reduce the attack surface of the S3 origin"},{"location":"serverless/task1/#view-the-existing-policy","text":"First, view the existing S3 bucket policy to see what permissions the previous engineers created. Go to the Amazon S3 console Click on the identity-wksp-serverless-< ACCOUNT# >-us-east-1-wildrydes bucket. Click on the Permissions tab and then click on Bucket Policy . What's wrong with this policy? What does \"Principal\": \"*\" mean? Both \"Principal\": \"*\" and \"Principal\":{\"AWS\":\"*\"} grant permission to everyone (also referred to as anonymous access). Use caution when granting anonymous access to your S3 bucket. When you grant anonymous access, anyone in the world can access your bucket. We highly recommend that you never grant any kind of anonymous write access to your S3 bucket.","title":"View the Existing Policy"},{"location":"serverless/task1/#modify-principal","text":"Since the current bucket allows for anonymous access, you need to change this to only allow access from the CloudFront Distribution. Go to the Amazon CloudFront console. You should see a Web Distribution for the WildRydes web application. Click on Origin Access Identities in the left navigation. You should see an identity named Unicorn OAI . CloudFront Origin Access Identity An Origin Access Identity (OAI) is a special CloudFront identity that you can associate with a Distribution in order restrict access using AWS IAM. You can also find the OAI by viewing your Web Distribution Copy down the ID. Go back to the Amazon S3 console and open up the bucket policy. Replace the principal with the following and click save : \"Principal\" : { \"AWS\" : \"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity <OAI ID>\" } , Info You could also use the canonical user id as the principal: \"CanonicalUser\": \"<OAI S3CanonicalUserId>\"","title":"Modify Principal"},{"location":"serverless/task1/#modify-actions","text":"Now that the principal is restricted to the identity associated with the CloudFront distribution you can take a closer look at the permissions. Go back to the Amazon S3 console and open up the bucket policy. Does CloudFront really need access to Delete Objects? The distribution is acting as a CDN for the static site so it only needs read access to the S3 bucket. Change the actions to ensure an end user can not affect the integrity of the site.","title":"Modify Actions"},{"location":"serverless/task1/#test-the-new-bucket-policy","text":"Now that the bucket policy has been updated, go validate that you can not access the website using an S3 URL. Open the Amazon CloudFormation console (us-east-1) Click on the Identity-RR-Wksp-Serverless-Round stack. Click on Outputs and click on WebsiteS3URL . Are you still able to access the site using the S3 URL?","title":"Test the new bucket policy"},{"location":"serverless/task1/#solve-the-mystery","text":"So you've modified the bucket policy to restrict access to read only actions from the CloudFront Distribution but for some reason you are still able to access the site using S3 URLs. Do some investigation into why this is the case and put in the additional control necessary to restrict the traffic. Tip What other access controls exist within S3? Look into the following resources: S3 Block Public Access (easiest) AWS IAM Policy Elements: NotPrincipal (hardest) Be sure to clear your cache when testing!","title":"Solve the Mystery"},{"location":"serverless/task1/#verify-phase-reduce-the-attack-surface-of-the-s3-origin","text":"Now that the additional identity control has been added to the application, you have been tasked with acting as an end user and manually testing to verify that the control has been put in place correctly and that the requirements have been met. Ensure the application serves content out through the CloudFront Distribution and that your end users can only access the application through CloudFront URLs and not Amazon S3 URLs. As part of this configuration your end users should not be able to affect the availability or integrity of the application. Verification Checklist You can access the site through the CloudFront Distribution URL (<WebsiteCloudFrontURL>). You are restricted from accessing any of the application resources through S3 URLs (<WebsiteS3URL>). Try some deep links (e.g. <WebsiteS3URL>/js/vendor/unicorn-icon) You can not delete or modify any of the application resources through the CloudFront Distribution. Try using something like curl or Postman to make requests with different HTTP verbs (e.g. Delete). Below is an example using curl: curl -i -X DELETE <WebsiteCloudFrontURL>/index.html After you have completed task you can move on to task 2.","title":"Verify Phase Reduce the attack surface of the S3 origin"},{"location":"serverless/task2/","text":"Serverless Identity Round Task 2 Build Phase Set up application user management Set up user management for the application using Cognito User pools. To reduce the operational overhead of creating and maintaining forms and custom logic for authentication, the decision has been made to use the Cognito hosted-UI to integrate the application with the User Pool. As part of the user experience users should be able to sign themselves up, they should have to validate their email address, and be required to create a password that meets the password complexity requirements for applications set in your security standards. Password Complexity Requirements for Applications Minimum length of 10 characters Must include symbols Must include numbers Must include uppercase characters Must include lowercase characters Application Integration Requirements Implicit grant OAuth flow Scopes: email openid Upon successful authentication the user should be redirected to ride.html Configure User Pool Go to the Amazon Cognito console (us-east-1) Click on Manage User Pools and then click on the WildRydes pool. Click on Policies in the left navigation and modify the password policy, enable users to sign themselves up, and save your changes. Click on MFA and Verifications in the left navigation, enable email verification, and save your changes. Configure App Integration Click on App Client Settings in the left navigation and enter the following and click Save changes : Enabled Identity Providers: Cognito User Pool Callback URL: <WebsiteCloudFrontURL>/ride.html Sign Out URL: <WebsiteCloudFrontURL>/index.html Allowed OAuth Flows: Implicit Grant Allowed OAuth Scope: email openid Click on Domain Name in the left navigation, enter a unique domain name, and save your changes. Construct the Hosted-UI URL Now that your User Pool and App Integration have been configured you can construct the URL to allow users to sign-in via the Cognito Hosted Wed UI (built-in webpages for signing up and signing in your users). <your_domain>/login?response_type=<code or token>&client_id=<your_app_client_id>&redirect_uri=<your_callback_url> Tip Replace the values in <> (including the carrots) to the correct values. All can be found in your Cognito configuration. The response type is based on the OAuth flow. Reference Documentation Go to the S3 console and click on the bucket named: identity-wksp-serverless-<ACCOUNT#>-us-east-1-wildrydes . Open index.html and add the hosted UI URL to the Giddy Up button. Upload index.html back to the S3 bucket. Verify Task 2 Set up application user management Now that the additional identity control has been added to the application, you have been tasked with acting as an end user and manually testing to verify that the control has been put in place correctly and that the requirements have been met. Set up user management for the application using Cognito User pools. To reduce the operational overhead of creating and maintaining forms and custom logic for authentication, the decision has been made to use the Cognito hosted-UI to integrate the application with the User Pool. As part of the user experience users should be able to sign themselves up, they should have to validate their email address, and be required to create a password that meets the password complexity requirements for applications set in your security standards. Verification Checklist You are taken to the hosted UI when clicking on Giddy Up . You are able to sign your self up for the site. You are required to create a password with the following complexity: Minimum length of 10 characters Must include symbols Must include numbers Must include uppercase characters You are required to verify your email address. After authentication, you are redirected to ride.html and are presented with your JWT IdToken. Final Architecture Cleanup In order to prevent charges to your account we recommend cleaning up the infrastructure that was created, especially if you are doing other Identity rounds. Expand one of the following dropdown sections and follow the instructions: You will need to manually delete some resources before you delete the CloudFormation stacks so please do the following steps in order. Delete the Amazon Cognito Domain for the hosted-UI. Go to the Amazon Cognito console. Click on the WildRydes pool. On the left navigation under App Integration , click on Domain Name . Click Delete Click the acknowledgement checkbox and click Delete Delete the CloudFormation stack ( Identity-RR-Wksp-Serverless-Round ). Go to the AWS CloudFormation console. Select the appropriate stack. Select Action . Click Delete Stack . Congratulations on completing the Serverless Round!","title":"Task 2"},{"location":"serverless/task2/#serverless-identity-round-task-2","text":"","title":"Serverless Identity Round Task 2"},{"location":"serverless/task2/#build-phase-set-up-application-user-management","text":"Set up user management for the application using Cognito User pools. To reduce the operational overhead of creating and maintaining forms and custom logic for authentication, the decision has been made to use the Cognito hosted-UI to integrate the application with the User Pool. As part of the user experience users should be able to sign themselves up, they should have to validate their email address, and be required to create a password that meets the password complexity requirements for applications set in your security standards. Password Complexity Requirements for Applications Minimum length of 10 characters Must include symbols Must include numbers Must include uppercase characters Must include lowercase characters Application Integration Requirements Implicit grant OAuth flow Scopes: email openid Upon successful authentication the user should be redirected to ride.html","title":"Build Phase Set up application user management"},{"location":"serverless/task2/#configure-user-pool","text":"Go to the Amazon Cognito console (us-east-1) Click on Manage User Pools and then click on the WildRydes pool. Click on Policies in the left navigation and modify the password policy, enable users to sign themselves up, and save your changes. Click on MFA and Verifications in the left navigation, enable email verification, and save your changes.","title":"Configure User Pool"},{"location":"serverless/task2/#configure-app-integration","text":"Click on App Client Settings in the left navigation and enter the following and click Save changes : Enabled Identity Providers: Cognito User Pool Callback URL: <WebsiteCloudFrontURL>/ride.html Sign Out URL: <WebsiteCloudFrontURL>/index.html Allowed OAuth Flows: Implicit Grant Allowed OAuth Scope: email openid Click on Domain Name in the left navigation, enter a unique domain name, and save your changes.","title":"Configure App Integration"},{"location":"serverless/task2/#construct-the-hosted-ui-url","text":"Now that your User Pool and App Integration have been configured you can construct the URL to allow users to sign-in via the Cognito Hosted Wed UI (built-in webpages for signing up and signing in your users). <your_domain>/login?response_type=<code or token>&client_id=<your_app_client_id>&redirect_uri=<your_callback_url> Tip Replace the values in <> (including the carrots) to the correct values. All can be found in your Cognito configuration. The response type is based on the OAuth flow. Reference Documentation Go to the S3 console and click on the bucket named: identity-wksp-serverless-<ACCOUNT#>-us-east-1-wildrydes . Open index.html and add the hosted UI URL to the Giddy Up button. Upload index.html back to the S3 bucket.","title":"Construct the Hosted-UI URL"},{"location":"serverless/task2/#verify-task-2-set-up-application-user-management","text":"Now that the additional identity control has been added to the application, you have been tasked with acting as an end user and manually testing to verify that the control has been put in place correctly and that the requirements have been met. Set up user management for the application using Cognito User pools. To reduce the operational overhead of creating and maintaining forms and custom logic for authentication, the decision has been made to use the Cognito hosted-UI to integrate the application with the User Pool. As part of the user experience users should be able to sign themselves up, they should have to validate their email address, and be required to create a password that meets the password complexity requirements for applications set in your security standards. Verification Checklist You are taken to the hosted UI when clicking on Giddy Up . You are able to sign your self up for the site. You are required to create a password with the following complexity: Minimum length of 10 characters Must include symbols Must include numbers Must include uppercase characters You are required to verify your email address. After authentication, you are redirected to ride.html and are presented with your JWT IdToken.","title":"Verify Task 2 Set up application user management"},{"location":"serverless/task2/#final-architecture","text":"","title":"Final Architecture"},{"location":"serverless/task2/#cleanup","text":"In order to prevent charges to your account we recommend cleaning up the infrastructure that was created, especially if you are doing other Identity rounds. Expand one of the following dropdown sections and follow the instructions: You will need to manually delete some resources before you delete the CloudFormation stacks so please do the following steps in order. Delete the Amazon Cognito Domain for the hosted-UI. Go to the Amazon Cognito console. Click on the WildRydes pool. On the left navigation under App Integration , click on Domain Name . Click Delete Click the acknowledgement checkbox and click Delete Delete the CloudFormation stack ( Identity-RR-Wksp-Serverless-Round ). Go to the AWS CloudFormation console. Select the appropriate stack. Select Action . Click Delete Stack . Congratulations on completing the Serverless Round!","title":"Cleanup"}]}